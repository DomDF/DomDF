data = euro_scorers %>%
dplyr::filter(sqrt((90/Mins_per_assist)^2 + (90/Mins_per_goal)^2) >= radius | Position == 'Attacking Midfield'),
size = 3, family ='Bahnschrift', segment.alpha = 0.25)+
geom_label(mapping = aes(x = radius, y = 0, label = paste('R = ', signif(x = radius, digits = 3))),
size = 3.5, family = 'Bahnschrift')+
#  geom_abline(slope = -1, intercept = 1, linetype = 2, alpha = 0.25)+
theme_ddf_light()+
#  scale_x_continuous(limits = c(0, 1.1)) + scale_y_continuous(limits = c(0.4, 1.4))+
labs(x = 'Assists per 90 Minutes', y = 'Goals per 90 Minutes',
title = paste('Players who have scored at least', min_goals, 'goals in the Top',
length(unique(euro_scorers$League)), 'European leagues (2019-20 season)'),
caption = 'Data from transfermarkt.com')
radius <- 3/4
ggplot(data = euro_scorers,
mapping = aes(x = 90/Mins_per_assist, y = 90/Mins_per_goal))+
ggforce::geom_arc(mapping = aes(x0 = 0, y0 = 0, r = radius,
start = 0, end = pi/2,
x = NULL, y = NULL),
linetype = 2, color = 'black')+
geom_point(shape = 21, size = 3, mapping = aes(fill = Position))+
#  facet_wrap(facets = ~ Position)+
scale_fill_viridis_d()+
ggrepel::geom_text_repel(mapping = aes(label = Player),
data = euro_scorers %>%
dplyr::filter(sqrt((90/Mins_per_assist)^2 + (90/Mins_per_goal)^2) >= radius | Position == 'Attacking Midfield'),
size = 3, family ='Bahnschrift', segment.alpha = 0.25)+
geom_label(mapping = aes(x = radius, y = 0, label = paste('R = ', signif(x = radius, digits = 3))),
size = 3.5, family = 'Bahnschrift')+
#  geom_abline(slope = -1, intercept = 1, linetype = 2, alpha = 0.25)+
theme_ddf_light()+
#  scale_x_continuous(limits = c(0, 1.1)) + scale_y_continuous(limits = c(0.4, 1.4))+
labs(x = 'Assists per 90 Minutes', y = 'Goals per 90 Minutes',
title = paste('Players who have scored at least', min_goals, 'goals in the Top',
length(unique(euro_scorers$League)), 'European leagues (2019-20 season)'),
caption = 'Data from transfermarkt.com')
euro_scorers <- rbind(prem_scorers, serie_A_scorers, la_liga_scorers, bundes_scorers, ligue_1_scorers) %>%
arrange(desc(Goals)) %>% dplyr::filter(Goals >= min_goals)
ggplot(data = euro_scorers,
mapping = aes(x = 90/Mins_per_assist, y = 90/Mins_per_goal))+
ggforce::geom_arc(mapping = aes(x0 = 0, y0 = 0, r = radius,
start = 0, end = pi/2,
x = NULL, y = NULL),
linetype = 2, color = 'black')+
geom_point(shape = 21, size = 3, mapping = aes(fill = Position))+
#  facet_wrap(facets = ~ Position)+
scale_fill_viridis_d()+
ggrepel::geom_text_repel(mapping = aes(label = Player),
data = euro_scorers %>%
dplyr::filter(sqrt((90/Mins_per_assist)^2 + (90/Mins_per_goal)^2) >= radius | Position == 'Attacking Midfield'),
size = 3, family ='Bahnschrift', segment.alpha = 0.25)+
geom_label(mapping = aes(x = radius, y = 0, label = paste('r = ', signif(x = radius, digits = 3))),
size = 3.5, family = 'Bahnschrift')+
#  geom_abline(slope = -1, intercept = 1, linetype = 2, alpha = 0.25)+
theme_ddf_light()+
#  scale_x_continuous(limits = c(0, 1.1)) + scale_y_continuous(limits = c(0.4, 1.4))+
labs(x = 'Assists per 90 Minutes', y = 'Goals per 90 Minutes',
title = paste('Players who have scored at least', min_goals, 'goals in the Top',
length(unique(euro_scorers$League)), 'European leagues (2019-20 season)'),
caption = 'Data from transfermarkt.com')
ggsave(filename = 'euro_scorers.png', device = 'png', width = 9, height = 8, dpi = 'retina')
min_goals <- 10; radius <- 1
euro_scorers <- rbind(prem_scorers, serie_A_scorers, la_liga_scorers, bundes_scorers, ligue_1_scorers) %>%
arrange(desc(Goals)) %>% dplyr::filter(Goals >= min_goals)
ggplot(data = euro_scorers,
mapping = aes(x = 90/Mins_per_assist, y = 90/Mins_per_goal))+
ggforce::geom_arc(mapping = aes(x0 = 0, y0 = 0, r = radius,
start = 0, end = pi/2,
x = NULL, y = NULL),
linetype = 2, color = 'black')+
geom_point(shape = 21, size = 3, mapping = aes(fill = Position))+
#  facet_wrap(facets = ~ Position)+
scale_fill_viridis_d()+
ggrepel::geom_text_repel(mapping = aes(label = Player),
data = euro_scorers %>%
dplyr::filter(sqrt((90/Mins_per_assist)^2 + (90/Mins_per_goal)^2) >= radius | Position == 'Attacking Midfield'),
size = 3, family ='Bahnschrift', segment.alpha = 0.25)+
geom_label(mapping = aes(x = radius, y = 0, label = paste('r = ', signif(x = radius, digits = 3))),
size = 3.5, family = 'Bahnschrift')+
#  geom_abline(slope = -1, intercept = 1, linetype = 2, alpha = 0.25)+
theme_ddf_light()+
#  scale_x_continuous(limits = c(0, 1.1)) + scale_y_continuous(limits = c(0.4, 1.4))+
labs(x = 'Assists per 90 Minutes', y = 'Goals per 90 Minutes',
title = paste('Players who have scored at least', min_goals, 'goals in the Top',
length(unique(euro_scorers$League)), 'European leagues (2019-20 season)'),
caption = 'Data from transfermarkt.com')
min_goals <- 10; radius <- 0.6
euro_scorers <- rbind(prem_scorers, serie_A_scorers, la_liga_scorers, bundes_scorers, ligue_1_scorers) %>%
arrange(desc(Goals)) %>% dplyr::filter(Goals >= min_goals)
ggplot(data = euro_scorers,
mapping = aes(x = 90/Mins_per_assist, y = 90/Mins_per_goal))+
ggforce::geom_arc(mapping = aes(x0 = 0, y0 = 0, r = radius,
start = 0, end = pi/2,
x = NULL, y = NULL),
linetype = 2, color = 'black')+
geom_point(shape = 21, size = 3, mapping = aes(fill = Position))+
#  facet_wrap(facets = ~ Position)+
scale_fill_viridis_d()+
ggrepel::geom_text_repel(mapping = aes(label = Player),
data = euro_scorers %>%
dplyr::filter(sqrt((90/Mins_per_assist)^2 + (90/Mins_per_goal)^2) >= radius | Position == 'Attacking Midfield'),
size = 3, family ='Bahnschrift', segment.alpha = 0.25)+
geom_label(mapping = aes(x = radius, y = 0, label = paste('r = ', signif(x = radius, digits = 3))),
size = 3.5, family = 'Bahnschrift')+
#  geom_abline(slope = -1, intercept = 1, linetype = 2, alpha = 0.25)+
theme_ddf_light()+
#  scale_x_continuous(limits = c(0, 1.1)) + scale_y_continuous(limits = c(0.4, 1.4))+
labs(x = 'Assists per 90 Minutes', y = 'Goals per 90 Minutes',
title = paste('Players who have scored at least', min_goals, 'goals in the Top',
length(unique(euro_scorers$League)), 'European leagues (2019-20 season)'),
caption = 'Data from transfermarkt.com')
min_goals <- 10; radius <- 3/4
euro_scorers <- rbind(prem_scorers, serie_A_scorers, la_liga_scorers, bundes_scorers, ligue_1_scorers) %>%
arrange(desc(Goals)) %>% dplyr::filter(Goals >= min_goals)
ggplot(data = euro_scorers,
mapping = aes(x = 90/Mins_per_assist, y = 90/Mins_per_goal))+
ggforce::geom_arc(mapping = aes(x0 = 0, y0 = 0, r = radius,
start = 0, end = pi/2,
x = NULL, y = NULL),
linetype = 2, color = 'black')+
geom_point(shape = 21, size = 3, mapping = aes(fill = Position))+
#  facet_wrap(facets = ~ Position)+
scale_fill_viridis_d()+
ggrepel::geom_text_repel(mapping = aes(label = Player),
data = euro_scorers %>%
dplyr::filter(sqrt((90/Mins_per_assist)^2 + (90/Mins_per_goal)^2) >= radius | Position == 'Attacking Midfield'),
size = 3, family ='Bahnschrift', segment.alpha = 0.25)+
geom_label(mapping = aes(x = radius, y = 0, label = paste('r = ', signif(x = radius, digits = 3))),
size = 3.5, family = 'Bahnschrift')+
#  geom_abline(slope = -1, intercept = 1, linetype = 2, alpha = 0.25)+
theme_ddf_light()+
#  scale_x_continuous(limits = c(0, 1.1)) + scale_y_continuous(limits = c(0.4, 1.4))+
labs(x = 'Assists per 90 Minutes', y = 'Goals per 90 Minutes',
title = paste('Players who have scored at least', min_goals, 'goals in the Top',
length(unique(euro_scorers$League)), 'European leagues (2019-20 season)'),
caption = 'Data from transfermarkt.com')
library(lhs)
lhs::randomLHS(n = 4, k = 3)
lhs::randomLHS(n = 10, k = 1)
lhs::randomLHS(n = 10, k = 1)
qnorm(p = lhs::randomLHS(n = 10, k = 1), mean = 0, sd = 1)
probs <- lhs::randomLHS(n = 10, k = 1)
probs
qnorm(p = probs, mean = 0, sd = 1)
process_args <- function(args){
processed_args <- paste(as.numeric(args[1]))
if(length(args) >= 2){
for (i in seq(from = 2, to = length(args))){
processed_args <- paste(processed_args, ',', as.numeric(args[i]))
}
} else {}
return(processed_args)
}
probs <- lhs::randomLHS(n = n_samples, k = 1)
n_samples <- 100
prior_dist <- 'exp'
prior_args <- list(rate = 1)
lim_dist <- 'norm'
lim_args <- list(mean = 3, sd = 1)
prior_args_proc <- process_args(args = prior_args); lim_args_proc <- process_args(args = lim_args)
prior_args_proc
lim_args_proc
rlang::eval_tidy(str2lang(paste0('q', prior_dist, '(', n_samples, ',', prior_args_proc, ')')))
qexp(p = probs)
qexp(p = probs, rate = 1)
qexp(probs, 1)
rlang::eval_tidy(str2lang(paste0('q', prior_dist, '(', probs, ',', prior_args_proc, ')')))
str2lang(paste0('q', prior_dist, '(', probs, ',', prior_args_proc, ')'))
probs
paste0('q', prior_dist, '(', probs, ',', prior_args_proc, ')')
samples <- data.frame(prior_samples = double(length = n_samples), lim_samples = double(length = n_samples))
n_samples
for (i in seq(from = 1, to = n_samples, by = 1)){
samples$prior_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', prior_dist, '(', probs[i], ',', prior_args_proc, ')')))
samples$lim_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', lim_dist, '(', n_samples, ',', lim_args_proc, ')')))
}
samples
probs <- lhs::randomLHS(n = n_samples, k = 1)
prior_args_proc <- process_args(args = prior_args); lim_args_proc <- process_args(args = lim_args)
samples <- data.frame(prior_samples = double(length = n_samples), lim_samples = double(length = n_samples))
for (i in seq(from = 1, to = n_samples, by = 1)){
samples$prior_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', prior_dist, '(', probs[i], ',', prior_args_proc, ')')))
samples$lim_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', lim_dist, '(', probs[i], ',', lim_args_proc, ')')))
}
samples
samples_df <- data.frame(prior_samples = double(length = n_samples), lim_samples = double(length = n_samples))
for (i in seq(from = 1, to = n_samples, by = 1)){
samples_df$prior_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', prior_dist, '(', probs[i], ',', prior_args_proc, ')')))
samples_df$lim_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', lim_dist, '(', probs[i], ',', lim_args_proc, ')')))
}
EC_prior <- sum(sampes_df$prior_samples > sampes_df$lim_samples) * (EC_lim_ex / n_samples)
EC_prior
EC_prior <- sum(samples_df$prior_samples > samples_df$lim_samples) * (EC_lim_ex / n_samples)
EC_lim_ex <- 1e5
EC_prior <- sum(samples_df$prior_samples > samples_df$lim_samples) * (EC_lim_ex / n_samples)
VoPI_df <- data.frame(samples_df$prior_samples, prob_lim_ex = double(length = length(prior_samples)), EC = double(length = length(prior_samples))) %>%
dplyr::arrange(samples_df$prior_samples)
library(tidyverse)
VoPI_df <- data.frame(samples_df$prior_samples, prob_lim_ex = double(length = length(prior_samples)), EC = double(length = length(prior_samples))) %>%
dplyr::arrange(samples_df$prior_samples)
VoPI_df <- data.frame(samples_df$prior_samples, prob_lim_ex = double(length = n_samples), EC = double(length = n_samples)) %>%
dplyr::arrange(samples_df$prior_samples)
VoPI_df
for(i in seq(from = 1, to = n_samples, by = 1)){
VoPI_df$prob_lim_ex[i] <- rlang::eval_tidy(str2lang(paste0('p', lim_dist, '(', VoPI_df$samples_df.prior_samples[i], ',', lim_args_proc, ')')))
VoPI_df$EC[i] <- VoPI_df$prob_lim_ex[i] * (EC_lim_ex / n_samples)
}
VoPI_df
EC_prepost <- mean(VoPI_df$EC)
EC_prepost
for(i in seq(from = 1, to = n_samples, by = 1)){
VoPI_df$prob_lim_ex[i] <- rlang::eval_tidy(str2lang(paste0('p', lim_dist, '(', VoPI_df$samples_df.prior_samples[i], ',', lim_args_proc, ')')))
VoPI_df$EC[i] <- VoPI_df$prob_lim_ex[i] * (EC_lim_ex)
}
EC_prepost <- mean(VoPI_df$EC)
EC_prepost
VoPI_df
EC_prepost
EC_prior
VoPI_df <- data.frame(samples_df$prior_samples, prob_lim_ex = double(length = n_samples), EC = double(length = n_samples)) %>%
dplyr::arrange(samples_df$prior_samples)
for(i in seq(from = 1, to = n_samples, by = 1)){
VoPI_df$prob_lim_ex[i] <- rlang::eval_tidy(str2lang(paste0('p', lim_dist, '(', VoPI_df$samples_df.prior_samples[i], ',', lim_args_proc, ')')))
VoPI_df$EC[i] <- VoPI_df$prob_lim_ex[i] * (EC_lim_ex / /n_samples)
}
EC_prepost <- mean(VoPI_df$EC)
VoPI <- max(0, (EC_prior - EC_prepost))
VoPI
mean(VoPI_df$EC)
VoPI_df <- data.frame(samples_df$prior_samples, prob_lim_ex = double(length = n_samples), EC = double(length = n_samples)) %>%
dplyr::arrange(samples_df$prior_samples)
for(i in seq(from = 1, to = n_samples, by = 1)){
VoPI_df$prob_lim_ex[i] <- rlang::eval_tidy(str2lang(paste0('p', lim_dist, '(', VoPI_df$samples_df.prior_samples[i], ',', lim_args_proc, ')')))
VoPI_df$EC[i] <- VoPI_df$prob_lim_ex[i] * (EC_lim_ex / /n_samples)
}
for(i in seq(from = 1, to = n_samples, by = 1)){
VoPI_df$prob_lim_ex[i] <- rlang::eval_tidy(str2lang(paste0('p', lim_dist, '(', VoPI_df$samples_df.prior_samples[i], ',', lim_args_proc, ')')))
VoPI_df$EC[i] <- VoPI_df$prob_lim_ex[i] * (EC_lim_ex / /n_samples)
}
for(i in seq(from = 1, to = n_samples, by = 1)){
VoPI_df$prob_lim_ex[i] <- rlang::eval_tidy(str2lang(paste0('p', lim_dist, '(', VoPI_df$samples_df.prior_samples[i], ',', lim_args_proc, ')')))
VoPI_df$EC[i] <- VoPI_df$prob_lim_ex[i] * (EC_lim_ex / /n_samples)
}
for(i in seq(from = 1, to = n_samples, by = 1)){
VoPI_df$prob_lim_ex[i] <- rlang::eval_tidy(str2lang(paste0('p', lim_dist, '(', VoPI_df$samples_df.prior_samples[i], ',', lim_args_proc, ')')))
VoPI_df$EC[i] <- VoPI_df$prob_lim_ex[i] * (EC_lim_ex / n_samples)
}
EC_prepost <- mean(VoPI_df$EC)
EC_prepost
VoPI <- max(0, (EC_prior - EC_prepost))
VoPI
VoPI <- function(prior_dist, prior_args, lim_dist, lim_args, ExpCost_lim_ex, n_samples = 1e4, method = 'lhs'){
require(tidyverse); require(lhs)
if(!grepl(pattern = 'beta|binom|cauchy|exp|gamma|lnorm|norm|unif|weibull',
x = prior_dist) == TRUE) stop('Please select a valid prior distribution')
if(!grepl(pattern = 'beta|binom|cauchy|exp|gamma|lnorm|norm|unif|weibull',
x = lim_dist) == TRUE) stop('Please select a valid limit distribution')
if (method != 'lhs' | method != 'mc') stop("Please enter a valid sampling method (currently, only 'lhs' and 'mc' are available")
if (method == 'lhs'){
probs <- lhs::randomLHS(n = n_samples, k = 1)
} else if (method == 'mc') {
probs <- runif(n = n_samples)
}
process_args <- function(args){
processed_args <- paste(as.numeric(args[1]))
if(length(args) >= 2){
for (i in seq(from = 2, to = length(args))){
processed_args <- paste(processed_args, ',', as.numeric(args[i]))
}
} else {}
return(processed_args)
}
prior_args_proc <- process_args(args = prior_args); lim_args_proc <- process_args(args = lim_args)
samples_df <- data.frame(prior_samples = double(length = n_samples), lim_samples = double(length = n_samples))
for (i in seq(from = 1, to = n_samples, by = 1)){
samples_df$prior_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', prior_dist, '(', probs[i], ',', prior_args_proc, ')')))
samples_df$lim_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', lim_dist, '(', probs[i], ',', lim_args_proc, ')')))
}
ExpCost_prior <- sum(samples_df$prior_samples > samples_df$lim_samples) * (ExpCost_lim_ex / n_samples)
VoPI_df <- data.frame(samples_df$prior_samples, prob_lim_ex = double(length = n_samples), ExpCost = double(length = n_samples)) %>%
dplyr::arrange(samples_df$prior_samples)
for(i in seq(from = 1, to = n_samples, by = 1)){
VoPI_df$prob_lim_ex[i] <- rlang::eval_tidy(str2lang(paste0('p', lim_dist, '(', VoPI_df$samples_df.prior_samples[i], ',', lim_args_proc, ')')))
VoPI_df$ExpCost[i] <- VoPI_df$prob_lim_ex[i] * (ExpCost_lim_ex / n_samples)
}
ExpCost_prepost <- mean(VoPI_df$ExpCost)
Exp_VoPI <- max(0, (ExpCost_prior - ExpCost_prepost))
VoPI_df <- data.frame(ExpCost_prior, ExpCost_prepost, Exp_VoPI)
return(VoPI)
}
VoPI(prior_dist = 'exp', prior_args = list(rate = 1), lim_dist = 'norm', lim_args = list(mean = 3, sd = 1), method = 'lhs', n_samples = 1e3)
VoPI(prior_dist = 'exp', prior_args = list(rate = 1), lim_dist = 'norm', lim_args = list(mean = 3, sd = 1), method = 'mc', n_samples = 1e3)
VoPI <- function(prior_dist, prior_args, lim_dist, lim_args, ExpCost_lim_ex, n_samples = 1e4, method = 'lhs'){
require(tidyverse); require(lhs)
if(!grepl(pattern = 'beta|binom|cauchy|exp|gamma|lnorm|norm|unif|weibull',
x = prior_dist) == TRUE) stop('Please select a valid prior distribution')
if(!grepl(pattern = 'beta|binom|cauchy|exp|gamma|lnorm|norm|unif|weibull',
x = lim_dist) == TRUE) stop('Please select a valid limit distribution')
if (method != 'lhs' & method != 'mc') stop("Please enter a valid sampling method (currently, only 'lhs' and 'mc' are available")
if (method == 'lhs'){
probs <- lhs::randomLHS(n = n_samples, k = 1)
} else if (method == 'mc') {
probs <- runif(n = n_samples)
}
process_args <- function(args){
processed_args <- paste(as.numeric(args[1]))
if(length(args) >= 2){
for (i in seq(from = 2, to = length(args))){
processed_args <- paste(processed_args, ',', as.numeric(args[i]))
}
} else {}
return(processed_args)
}
prior_args_proc <- process_args(args = prior_args); lim_args_proc <- process_args(args = lim_args)
samples_df <- data.frame(prior_samples = double(length = n_samples), lim_samples = double(length = n_samples))
for (i in seq(from = 1, to = n_samples, by = 1)){
samples_df$prior_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', prior_dist, '(', probs[i], ',', prior_args_proc, ')')))
samples_df$lim_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', lim_dist, '(', probs[i], ',', lim_args_proc, ')')))
}
ExpCost_prior <- sum(samples_df$prior_samples > samples_df$lim_samples) * (ExpCost_lim_ex / n_samples)
VoPI_df <- data.frame(samples_df$prior_samples, prob_lim_ex = double(length = n_samples), ExpCost = double(length = n_samples)) %>%
dplyr::arrange(samples_df$prior_samples)
for(i in seq(from = 1, to = n_samples, by = 1)){
VoPI_df$prob_lim_ex[i] <- rlang::eval_tidy(str2lang(paste0('p', lim_dist, '(', VoPI_df$samples_df.prior_samples[i], ',', lim_args_proc, ')')))
VoPI_df$ExpCost[i] <- VoPI_df$prob_lim_ex[i] * (ExpCost_lim_ex / n_samples)
}
ExpCost_prepost <- mean(VoPI_df$ExpCost)
Exp_VoPI <- max(0, (ExpCost_prior - ExpCost_prepost))
VoPI_df <- data.frame(ExpCost_prior, ExpCost_prepost, Exp_VoPI)
return(VoPI)
}
VoPI(prior_dist = 'exp', prior_args = list(rate = 1), lim_dist = 'norm', lim_args = list(mean = 3, sd = 1), method = 'mc', n_samples = 1e3)
VoPI(prior_dist = 'exp', prior_args = list(rate = 1), lim_dist = 'norm', lim_args = list(mean = 3, sd = 1), method = 'mc', n_samples = 1e3, ExpCost_lim_ex = 1e5)
VoPI <- function(prior_dist, prior_args, lim_dist, lim_args, ExpCost_lim_ex, n_samples = 1e4, method = 'lhs'){
require(tidyverse); require(lhs)
if(!grepl(pattern = 'beta|binom|cauchy|exp|gamma|lnorm|norm|unif|weibull',
x = prior_dist) == TRUE) stop('Please select a valid prior distribution')
if(!grepl(pattern = 'beta|binom|cauchy|exp|gamma|lnorm|norm|unif|weibull',
x = lim_dist) == TRUE) stop('Please select a valid limit distribution')
if (method != 'lhs' & method != 'mc') stop("Please enter a valid sampling method (currently, only 'lhs' and 'mc' are available")
if (method == 'lhs'){
probs <- lhs::randomLHS(n = n_samples, k = 1)
} else if (method == 'mc') {
probs <- runif(n = n_samples)
}
process_args <- function(args){
processed_args <- paste(as.numeric(args[1]))
if(length(args) >= 2){
for (i in seq(from = 2, to = length(args))){
processed_args <- paste(processed_args, ',', as.numeric(args[i]))
}
} else {}
return(processed_args)
}
prior_args_proc <- process_args(args = prior_args); lim_args_proc <- process_args(args = lim_args)
samples_df <- data.frame(prior_samples = double(length = n_samples), lim_samples = double(length = n_samples))
for (i in seq(from = 1, to = n_samples, by = 1)){
samples_df$prior_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', prior_dist, '(', probs[i], ',', prior_args_proc, ')')))
samples_df$lim_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', lim_dist, '(', probs[i], ',', lim_args_proc, ')')))
}
ExpCost_prior <- sum(samples_df$prior_samples > samples_df$lim_samples) * (ExpCost_lim_ex / n_samples)
VoPI_df <- data.frame(samples_df$prior_samples, prob_lim_ex = double(length = n_samples), ExpCost = double(length = n_samples)) %>%
dplyr::arrange(samples_df$prior_samples)
for(i in seq(from = 1, to = n_samples, by = 1)){
VoPI_df$prob_lim_ex[i] <- rlang::eval_tidy(str2lang(paste0('p', lim_dist, '(', VoPI_df$samples_df.prior_samples[i], ',', lim_args_proc, ')')))
VoPI_df$ExpCost[i] <- VoPI_df$prob_lim_ex[i] * (ExpCost_lim_ex / n_samples)
}
ExpCost_prepost <- mean(VoPI_df$ExpCost)
Exp_VoPI <- max(0, (ExpCost_prior - ExpCost_prepost))
VoPI_df <- data.frame(ExpCost_prior, ExpCost_prepost, Exp_VoPI)
return(VoPI)
}
VoPI(prior_dist = 'exp', prior_args = list(rate = 1), lim_dist = 'norm', lim_args = list(mean = 3, sd = 1), method = 'mc', n_samples = 1e3, ExpCost_lim_ex = 1e5)
VoPI <- function(prior_dist, prior_args, lim_dist, lim_args, ExpCost_lim_ex, n_samples = 1e4, method = 'lhs'){
require(tidyverse); require(lhs)
if(!grepl(pattern = 'beta|binom|cauchy|exp|gamma|lnorm|norm|unif|weibull',
x = prior_dist) == TRUE) stop('Please select a valid prior distribution')
if(!grepl(pattern = 'beta|binom|cauchy|exp|gamma|lnorm|norm|unif|weibull',
x = lim_dist) == TRUE) stop('Please select a valid limit distribution')
if (method != 'lhs' & method != 'mc') stop("Please enter a valid sampling method (currently, only 'lhs' and 'mc' are available")
if (method == 'lhs'){
probs <- lhs::randomLHS(n = n_samples, k = 1)
} else if (method == 'mc') {
probs <- runif(n = n_samples)
}
process_args <- function(args){
processed_args <- paste(as.numeric(args[1]))
if(length(args) >= 2){
for (i in seq(from = 2, to = length(args))){
processed_args <- paste(processed_args, ',', as.numeric(args[i]))
}
} else {}
return(processed_args)
}
prior_args_proc <- process_args(args = prior_args); lim_args_proc <- process_args(args = lim_args)
samples_df <- data.frame(prior_samples = double(length = n_samples), lim_samples = double(length = n_samples))
for (i in seq(from = 1, to = n_samples, by = 1)){
samples_df$prior_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', prior_dist, '(', probs[i], ',', prior_args_proc, ')')))
samples_df$lim_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', lim_dist, '(', probs[i], ',', lim_args_proc, ')')))
}
ExpCost_prior <- sum(samples_df$prior_samples > samples_df$lim_samples) * (ExpCost_lim_ex / n_samples)
VoPI_df <- data.frame(samples_df$prior_samples, prob_lim_ex = double(length = n_samples), ExpCost = double(length = n_samples)) %>%
dplyr::arrange(samples_df$prior_samples)
for(i in seq(from = 1, to = n_samples, by = 1)){
VoPI_df$prob_lim_ex[i] <- rlang::eval_tidy(str2lang(paste0('p', lim_dist, '(', VoPI_df$samples_df.prior_samples[i], ',', lim_args_proc, ')')))
VoPI_df$ExpCost[i] <- VoPI_df$prob_lim_ex[i] * (ExpCost_lim_ex / n_samples)
}
ExpCost_prepost <- mean(VoPI_df$ExpCost)
Exp_VoPI <- max(0, (ExpCost_prior - ExpCost_prepost))
VoPI_df <- data.frame(ExpCost_prior, ExpCost_prepost, Exp_VoPI)
return(VoPI_df)
}
VoPI(prior_dist = 'exp', prior_args = list(rate = 1), lim_dist = 'norm', lim_args = list(mean = 3, sd = 1), method = 'mc', n_samples = 1e3, ExpCost_lim_ex = 1e5)
VoPI(prior_dist = 'exp', prior_args = list(rate = 1), lim_dist = 'norm', lim_args = list(mean = 3, sd = 1), method = 'lhs', n_samples = 1e3, ExpCost_lim_ex = 1e5)
VoPI <- function(prior_dist, prior_args, lim_dist, lim_args, ExpCost_lim_ex, n_samples = 1e4, method = 'lhs'){
require(tidyverse); require(lhs)
if(!grepl(pattern = 'beta|binom|cauchy|exp|gamma|lnorm|norm|unif|weibull',
x = prior_dist) == TRUE) stop('Please select a valid prior distribution')
if(!grepl(pattern = 'beta|binom|cauchy|exp|gamma|lnorm|norm|unif|weibull',
x = lim_dist) == TRUE) stop('Please select a valid limit distribution')
if (method != 'lhs' & method != 'mc') stop("Please enter a valid sampling method (currently, only 'lhs' and 'mc' are available")
if (method == 'lhs'){
probs <- lhs::randomLHS(n = n_samples, k = 1)
} else if (method == 'mc') {
probs <- runif(n = n_samples)
}
process_args <- function(args){
processed_args <- paste(as.numeric(args[1]))
if(length(args) >= 2){
for (i in seq(from = 2, to = length(args))){
processed_args <- paste(processed_args, ',', as.numeric(args[i]))
}
} else {}
return(processed_args)
}
prior_args_proc <- process_args(args = prior_args); lim_args_proc <- process_args(args = lim_args)
samples_df <- data.frame(prior_samples = double(length = n_samples), lim_samples = double(length = n_samples))
for (i in seq(from = 1, to = n_samples, by = 1)){
samples_df$prior_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', prior_dist, '(', probs[i], ',', prior_args_proc, ')')))
samples_df$lim_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', lim_dist, '(', probs[i], ',', lim_args_proc, ')')))
}
ExpCost_prior <- sum(samples_df$prior_samples > samples_df$lim_samples) * (ExpCost_lim_ex / n_samples)
VoPI_df <- data.frame(samples_df$prior_samples, prob_lim_ex = double(length = n_samples), ExpCost = double(length = n_samples)) %>%
dplyr::arrange(samples_df$prior_samples)
for(i in seq(from = 1, to = n_samples, by = 1)){
VoPI_df$prob_lim_ex[i] <- rlang::eval_tidy(str2lang(paste0('p', lim_dist, '(', VoPI_df$samples_df.prior_samples[i], ',', lim_args_proc, ')')))
VoPI_df$ExpCost[i] <- VoPI_df$prob_lim_ex[i] * (ExpCost_lim_ex / n_samples)
}
ExpCost_prepost <- mean(VoPI_df$ExpCost)
Exp_VoPI <- max(0, (ExpCost_prior - ExpCost_prepost))
VoPI_df <- data.frame(ExpCost_prior, ExpCost_prepost, Exp_VoPI, sampling_method = method)
return(VoPI_df)
}
VoPI(prior_dist = 'exp', prior_args = list(rate = 1), lim_dist = 'norm', lim_args = list(mean = 3, sd = 1), method = 'lhs', n_samples = 1e3, ExpCost_lim_ex = 1e5)
VoPI(prior_dist = 'exp', prior_args = list(rate = 1), lim_dist = 'norm', lim_args = list(mean = 3, sd = 1), method = 'mc', n_samples = 1e3, ExpCost_lim_ex = 1e5)
set.seed(seed = NULL)
rnorm(1)
rnorm(1)
rnorm(1)
VoPI <- function(prior_dist, prior_args, lim_dist, lim_args, ExpCost_lim_ex, n_samples = 1e4, method = 'lhs', VoPI_seed = 1008){
require(tidyverse); require(lhs)
if(!grepl(pattern = 'beta|binom|cauchy|exp|gamma|lnorm|norm|unif|weibull',
x = prior_dist) == TRUE) stop('Please select a valid prior distribution')
if(!grepl(pattern = 'beta|binom|cauchy|exp|gamma|lnorm|norm|unif|weibull',
x = lim_dist) == TRUE) stop('Please select a valid limit distribution')
if (method != 'lhs' & method != 'mc') stop("Please enter a valid sampling method (currently, only 'lhs' and 'mc' are available")
set.seed(seed = VoPI_seed)
if (method == 'lhs'){
probs <- lhs::randomLHS(n = n_samples, k = 1)
} else if (method == 'mc') {
probs <- runif(n = n_samples)
}
process_args <- function(args){
processed_args <- paste(as.numeric(args[1]))
if(length(args) >= 2){
for (i in seq(from = 2, to = length(args))){
processed_args <- paste(processed_args, ',', as.numeric(args[i]))
}
} else {}
return(processed_args)
}
prior_args_proc <- process_args(args = prior_args); lim_args_proc <- process_args(args = lim_args)
samples_df <- data.frame(prior_samples = double(length = n_samples), lim_samples = double(length = n_samples))
for (i in seq(from = 1, to = n_samples, by = 1)){
samples_df$prior_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', prior_dist, '(', probs[i], ',', prior_args_proc, ')')))
samples_df$lim_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', lim_dist, '(', probs[i], ',', lim_args_proc, ')')))
}
ExpCost_prior <- sum(samples_df$prior_samples > samples_df$lim_samples) * (ExpCost_lim_ex / n_samples)
VoPI_df <- data.frame(samples_df$prior_samples, prob_lim_ex = double(length = n_samples), ExpCost = double(length = n_samples)) %>%
dplyr::arrange(samples_df$prior_samples)
for(i in seq(from = 1, to = n_samples, by = 1)){
VoPI_df$prob_lim_ex[i] <- rlang::eval_tidy(str2lang(paste0('p', lim_dist, '(', VoPI_df$samples_df.prior_samples[i], ',', lim_args_proc, ')')))
VoPI_df$ExpCost[i] <- VoPI_df$prob_lim_ex[i] * (ExpCost_lim_ex / n_samples)
}
ExpCost_prepost <- mean(VoPI_df$ExpCost)
Exp_VoPI <- max(0, (ExpCost_prior - ExpCost_prepost))
VoPI_df <- data.frame(ExpCost_prior, ExpCost_prepost, Exp_VoPI, sampling_method = method)
return(VoPI_df)
}
VoPI(prior_dist = 'exp', prior_args = list(rate = 1), lim_dist = 'norm', lim_args = list(mean = 3, sd = 1), method = 'mc', n_samples = 1e3, ExpCost_lim_ex = 1e5)
VoPI(prior_dist = 'exp', prior_args = list(rate = 1), lim_dist = 'norm', lim_args = list(mean = 3, sd = 1), method = 'lhs', n_samples = 1e3, ExpCost_lim_ex = 1e5)
VoPI(prior_dist = 'exp', prior_args = list(rate = 1), lim_dist = 'norm', lim_args = list(mean = 3, sd = 1), method = 'lhs', ExpCost_lim_ex = 1e5)
VoPI(prior_dist = 'exp', prior_args = list(rate = 1), lim_dist = 'norm', lim_args = list(mean = 3, sd = 1), method = 'mc', ExpCost_lim_ex = 1e5)
setwd("~/GitHub/DomDF")
library(roxygen2)
library(devtools)
document()
rm(list = c("VoPI"))
document()
devtools::install_github(repo = 'DomDF/DomDF')
library(DomDF)
library(DomDF)
DomDF::
