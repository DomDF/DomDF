} else {
q <- q + 0
}
}
ExpCost_prior <- min((1 / n_samples) * q * (ExpCost_lim_ex),
ExpCost_rm + (rm_lim_ex * ExpCost_lim_ex))
}
ExpCost_prior
if (grepl(pattern = 'lhs', x = method)){
prior_probs <- lhs::randomLHS(n = n_samples, k = 1)
lim_probs <- lhs::randomLHS(n = n_samples, k = 1)
} else {
prior_probs <- runif(n = n_samples)
lim_probs <- runif(n = n_samples)
# } else if (method == 'is') {
#
#   is_prior_probs <- rlang::eval_tidy(str2lang(paste0('p', prior_dist, '(', 'r', lim_dist, '(', n_samples, ',', lim_args_proc, ')', ',', prior_args_proc, ')')))
#   prior_probs <- runif(n = n_samples)
#   lim_probs <- runif(n = n_samples)
#
# } else if (method = 'is+lhs'){
#
#   prior_probs <- lhs::randomLHS(n = n_samples, k = 1)
#   lim_probs <- lhs::randomLHS(n = n_samples, k = 1)
}
if (grepl(pattern = 'is', x = method)) {
samples_df <- data.frame(prior_samples = double(length = n_samples), is_prior_samples = double(length = n_samples),
lim_samples = double(length = n_samples),
is_lik = double(length = n_samples), corr_lik = double(length = n_samples))
q <- 0
for (i in seq(from = 1, to = nrow(samples_df), by = 1)){
is_prior_probs[i] <- rlang::eval_tidy(str2lang(paste0('p', prior_dist, '(', 'q', lim_dist, '(', prior_probs[i], ',', lim_args_proc, ')', ',', prior_args_proc, ')')))
samples_df$prior_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', prior_dist, '(', prior_probs[i], ',', prior_args_proc, ')')))
samples_df$is_prior_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', prior_dist, '(', is_prior_probs[i], ',', prior_args_proc, ')')))
samples_df$lim_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', lim_dist, '(', lim_probs[i], ',', lim_args_proc, ')')))
samples_df$is_lik[i] <- rlang::eval_tidy(str2lang(paste0('d', lim_dist, '(', samples_df$is_prior_samples[i], ',',  lim_args_proc, ')')))
samples_df$corr_lik[i] <- rlang::eval_tidy(str2lang(paste0('d', prior_dist, '(', samples_df$is_prior_samples[i], ',',  prior_args_proc, ')')))
if (samples_df$is_prior_samples[i] > samples_df$lim_samples[i]){
q <- q + (samples_df$corr_lik[i] / samples_df$is_lik[i])
} else {
q <- q + 0
}
}
ExpCost_prior <- min((1 / n_samples) * q * (ExpCost_lim_ex),
ExpCost_rm + (rm_lim_ex * ExpCost_lim_ex))
}
ExpCost_prior
if (grepl(pattern = 'lhs', x = method)){
prior_probs <- lhs::randomLHS(n = n_samples, k = 1)
lim_probs <- lhs::randomLHS(n = n_samples, k = 1)
} else {
prior_probs <- runif(n = n_samples)
lim_probs <- runif(n = n_samples)
# } else if (method == 'is') {
#
#   is_prior_probs <- rlang::eval_tidy(str2lang(paste0('p', prior_dist, '(', 'r', lim_dist, '(', n_samples, ',', lim_args_proc, ')', ',', prior_args_proc, ')')))
#   prior_probs <- runif(n = n_samples)
#   lim_probs <- runif(n = n_samples)
#
# } else if (method = 'is+lhs'){
#
#   prior_probs <- lhs::randomLHS(n = n_samples, k = 1)
#   lim_probs <- lhs::randomLHS(n = n_samples, k = 1)
}
if (grepl(pattern = 'is', x = method)) {
samples_df <- data.frame(prior_samples = double(length = n_samples), is_prior_samples = double(length = n_samples),
lim_samples = double(length = n_samples),
is_lik = double(length = n_samples), corr_lik = double(length = n_samples))
q <- 0
for (i in seq(from = 1, to = nrow(samples_df), by = 1)){
is_prior_probs[i] <- rlang::eval_tidy(str2lang(paste0('p', prior_dist, '(', 'q', lim_dist, '(', prior_probs[i], ',', lim_args_proc, ')', ',', prior_args_proc, ')')))
samples_df$prior_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', prior_dist, '(', prior_probs[i], ',', prior_args_proc, ')')))
samples_df$is_prior_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', prior_dist, '(', is_prior_probs[i], ',', prior_args_proc, ')')))
samples_df$lim_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', lim_dist, '(', lim_probs[i], ',', lim_args_proc, ')')))
samples_df$is_lik[i] <- rlang::eval_tidy(str2lang(paste0('d', lim_dist, '(', samples_df$is_prior_samples[i], ',',  lim_args_proc, ')')))
samples_df$corr_lik[i] <- rlang::eval_tidy(str2lang(paste0('d', prior_dist, '(', samples_df$is_prior_samples[i], ',',  prior_args_proc, ')')))
if (samples_df$is_prior_samples[i] > samples_df$lim_samples[i]){
q <- q + (samples_df$corr_lik[i] / samples_df$is_lik[i])
} else {
q <- q + 0
}
}
ExpCost_prior <- min((1 / n_samples) * q * (ExpCost_lim_ex),
ExpCost_rm + (rm_lim_ex * ExpCost_lim_ex))
}
ExpCost_prior
if (grepl(pattern = 'lhs', x = method)){
prior_probs <- lhs::randomLHS(n = n_samples, k = 1)
lim_probs <- lhs::randomLHS(n = n_samples, k = 1)
} else {
prior_probs <- runif(n = n_samples)
lim_probs <- runif(n = n_samples)
# } else if (method == 'is') {
#
#   is_prior_probs <- rlang::eval_tidy(str2lang(paste0('p', prior_dist, '(', 'r', lim_dist, '(', n_samples, ',', lim_args_proc, ')', ',', prior_args_proc, ')')))
#   prior_probs <- runif(n = n_samples)
#   lim_probs <- runif(n = n_samples)
#
# } else if (method = 'is+lhs'){
#
#   prior_probs <- lhs::randomLHS(n = n_samples, k = 1)
#   lim_probs <- lhs::randomLHS(n = n_samples, k = 1)
}
if (grepl(pattern = 'is', x = method)) {
samples_df <- data.frame(prior_samples = double(length = n_samples), is_prior_samples = double(length = n_samples),
lim_samples = double(length = n_samples),
is_lik = double(length = n_samples), corr_lik = double(length = n_samples))
q <- 0
for (i in seq(from = 1, to = nrow(samples_df), by = 1)){
is_prior_probs[i] <- rlang::eval_tidy(str2lang(paste0('p', prior_dist, '(', 'q', lim_dist, '(', prior_probs[i], ',', lim_args_proc, ')', ',', prior_args_proc, ')')))
samples_df$prior_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', prior_dist, '(', prior_probs[i], ',', prior_args_proc, ')')))
samples_df$is_prior_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', prior_dist, '(', is_prior_probs[i], ',', prior_args_proc, ')')))
samples_df$lim_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', lim_dist, '(', lim_probs[i], ',', lim_args_proc, ')')))
samples_df$is_lik[i] <- rlang::eval_tidy(str2lang(paste0('d', lim_dist, '(', samples_df$is_prior_samples[i], ',',  lim_args_proc, ')')))
samples_df$corr_lik[i] <- rlang::eval_tidy(str2lang(paste0('d', prior_dist, '(', samples_df$is_prior_samples[i], ',',  prior_args_proc, ')')))
if (samples_df$is_prior_samples[i] > samples_df$lim_samples[i]){
q <- q + (samples_df$corr_lik[i] / samples_df$is_lik[i])
} else {
q <- q + 0
}
}
ExpCost_prior <- min((1 / n_samples) * q * (ExpCost_lim_ex),
ExpCost_rm + (rm_lim_ex * ExpCost_lim_ex))
}
ExpCost_prior
n_samples <- 100
if (grepl(pattern = 'lhs', x = method)){
prior_probs <- lhs::randomLHS(n = n_samples, k = 1)
lim_probs <- lhs::randomLHS(n = n_samples, k = 1)
} else {
prior_probs <- runif(n = n_samples)
lim_probs <- runif(n = n_samples)
# } else if (method == 'is') {
#
#   is_prior_probs <- rlang::eval_tidy(str2lang(paste0('p', prior_dist, '(', 'r', lim_dist, '(', n_samples, ',', lim_args_proc, ')', ',', prior_args_proc, ')')))
#   prior_probs <- runif(n = n_samples)
#   lim_probs <- runif(n = n_samples)
#
# } else if (method = 'is+lhs'){
#
#   prior_probs <- lhs::randomLHS(n = n_samples, k = 1)
#   lim_probs <- lhs::randomLHS(n = n_samples, k = 1)
}
if (grepl(pattern = 'is', x = method)) {
samples_df <- data.frame(prior_samples = double(length = n_samples), is_prior_samples = double(length = n_samples),
lim_samples = double(length = n_samples),
is_lik = double(length = n_samples), corr_lik = double(length = n_samples))
q <- 0
for (i in seq(from = 1, to = nrow(samples_df), by = 1)){
is_prior_probs[i] <- rlang::eval_tidy(str2lang(paste0('p', prior_dist, '(', 'q', lim_dist, '(', prior_probs[i], ',', lim_args_proc, ')', ',', prior_args_proc, ')')))
samples_df$prior_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', prior_dist, '(', prior_probs[i], ',', prior_args_proc, ')')))
samples_df$is_prior_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', prior_dist, '(', is_prior_probs[i], ',', prior_args_proc, ')')))
samples_df$lim_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', lim_dist, '(', lim_probs[i], ',', lim_args_proc, ')')))
samples_df$is_lik[i] <- rlang::eval_tidy(str2lang(paste0('d', lim_dist, '(', samples_df$is_prior_samples[i], ',',  lim_args_proc, ')')))
samples_df$corr_lik[i] <- rlang::eval_tidy(str2lang(paste0('d', prior_dist, '(', samples_df$is_prior_samples[i], ',',  prior_args_proc, ')')))
if (samples_df$is_prior_samples[i] > samples_df$lim_samples[i]){
q <- q + (samples_df$corr_lik[i] / samples_df$is_lik[i])
} else {
q <- q + 0
}
}
ExpCost_prior <- min((1 / n_samples) * q * (ExpCost_lim_ex),
ExpCost_rm + (rm_lim_ex * ExpCost_lim_ex))
}
ExpCost_prior
if (grepl(pattern = 'lhs', x = method)){
prior_probs <- lhs::randomLHS(n = n_samples, k = 1)
lim_probs <- lhs::randomLHS(n = n_samples, k = 1)
} else {
prior_probs <- runif(n = n_samples)
lim_probs <- runif(n = n_samples)
# } else if (method == 'is') {
#
#   is_prior_probs <- rlang::eval_tidy(str2lang(paste0('p', prior_dist, '(', 'r', lim_dist, '(', n_samples, ',', lim_args_proc, ')', ',', prior_args_proc, ')')))
#   prior_probs <- runif(n = n_samples)
#   lim_probs <- runif(n = n_samples)
#
# } else if (method = 'is+lhs'){
#
#   prior_probs <- lhs::randomLHS(n = n_samples, k = 1)
#   lim_probs <- lhs::randomLHS(n = n_samples, k = 1)
}
if (grepl(pattern = 'is', x = method)) {
samples_df <- data.frame(prior_samples = double(length = n_samples), is_prior_samples = double(length = n_samples),
lim_samples = double(length = n_samples),
is_lik = double(length = n_samples), corr_lik = double(length = n_samples))
q <- 0
for (i in seq(from = 1, to = nrow(samples_df), by = 1)){
is_prior_probs[i] <- rlang::eval_tidy(str2lang(paste0('p', prior_dist, '(', 'q', lim_dist, '(', prior_probs[i], ',', lim_args_proc, ')', ',', prior_args_proc, ')')))
samples_df$prior_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', prior_dist, '(', prior_probs[i], ',', prior_args_proc, ')')))
samples_df$is_prior_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', prior_dist, '(', is_prior_probs[i], ',', prior_args_proc, ')')))
samples_df$lim_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', lim_dist, '(', lim_probs[i], ',', lim_args_proc, ')')))
samples_df$is_lik[i] <- rlang::eval_tidy(str2lang(paste0('d', lim_dist, '(', samples_df$is_prior_samples[i], ',',  lim_args_proc, ')')))
samples_df$corr_lik[i] <- rlang::eval_tidy(str2lang(paste0('d', prior_dist, '(', samples_df$is_prior_samples[i], ',',  prior_args_proc, ')')))
if (samples_df$is_prior_samples[i] > samples_df$lim_samples[i]){
q <- q + (samples_df$corr_lik[i] / samples_df$is_lik[i])
} else {
q <- q + 0
}
}
ExpCost_prior <- min((1 / n_samples) * q * (ExpCost_lim_ex),
ExpCost_rm + (rm_lim_ex * ExpCost_lim_ex))
}
ExpCost_prior
if (grepl(pattern = 'lhs', x = method)){
prior_probs <- lhs::randomLHS(n = n_samples, k = 1)
lim_probs <- lhs::randomLHS(n = n_samples, k = 1)
} else {
prior_probs <- runif(n = n_samples)
lim_probs <- runif(n = n_samples)
# } else if (method == 'is') {
#
#   is_prior_probs <- rlang::eval_tidy(str2lang(paste0('p', prior_dist, '(', 'r', lim_dist, '(', n_samples, ',', lim_args_proc, ')', ',', prior_args_proc, ')')))
#   prior_probs <- runif(n = n_samples)
#   lim_probs <- runif(n = n_samples)
#
# } else if (method = 'is+lhs'){
#
#   prior_probs <- lhs::randomLHS(n = n_samples, k = 1)
#   lim_probs <- lhs::randomLHS(n = n_samples, k = 1)
}
if (grepl(pattern = 'is', x = method)) {
samples_df <- data.frame(prior_samples = double(length = n_samples), is_prior_samples = double(length = n_samples),
lim_samples = double(length = n_samples),
is_lik = double(length = n_samples), corr_lik = double(length = n_samples))
q <- 0
for (i in seq(from = 1, to = nrow(samples_df), by = 1)){
is_prior_probs[i] <- rlang::eval_tidy(str2lang(paste0('p', prior_dist, '(', 'q', lim_dist, '(', prior_probs[i], ',', lim_args_proc, ')', ',', prior_args_proc, ')')))
samples_df$prior_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', prior_dist, '(', prior_probs[i], ',', prior_args_proc, ')')))
samples_df$is_prior_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', prior_dist, '(', is_prior_probs[i], ',', prior_args_proc, ')')))
samples_df$lim_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', lim_dist, '(', lim_probs[i], ',', lim_args_proc, ')')))
samples_df$is_lik[i] <- rlang::eval_tidy(str2lang(paste0('d', lim_dist, '(', samples_df$is_prior_samples[i], ',',  lim_args_proc, ')')))
samples_df$corr_lik[i] <- rlang::eval_tidy(str2lang(paste0('d', prior_dist, '(', samples_df$is_prior_samples[i], ',',  prior_args_proc, ')')))
if (samples_df$is_prior_samples[i] > samples_df$lim_samples[i]){
q <- q + (samples_df$corr_lik[i] / samples_df$is_lik[i])
} else {
q <- q + 0
}
}
ExpCost_prior <- min((1 / n_samples) * q * (ExpCost_lim_ex),
ExpCost_rm + (rm_lim_ex * ExpCost_lim_ex))
}
ExpCost_prior
if (grepl(pattern = 'lhs', x = method)){
prior_probs <- lhs::randomLHS(n = n_samples, k = 1)
lim_probs <- lhs::randomLHS(n = n_samples, k = 1)
} else {
prior_probs <- runif(n = n_samples)
lim_probs <- runif(n = n_samples)
# } else if (method == 'is') {
#
#   is_prior_probs <- rlang::eval_tidy(str2lang(paste0('p', prior_dist, '(', 'r', lim_dist, '(', n_samples, ',', lim_args_proc, ')', ',', prior_args_proc, ')')))
#   prior_probs <- runif(n = n_samples)
#   lim_probs <- runif(n = n_samples)
#
# } else if (method = 'is+lhs'){
#
#   prior_probs <- lhs::randomLHS(n = n_samples, k = 1)
#   lim_probs <- lhs::randomLHS(n = n_samples, k = 1)
}
if (grepl(pattern = 'is', x = method)) {
samples_df <- data.frame(prior_samples = double(length = n_samples), is_prior_samples = double(length = n_samples),
lim_samples = double(length = n_samples),
is_lik = double(length = n_samples), corr_lik = double(length = n_samples))
q <- 0
for (i in seq(from = 1, to = nrow(samples_df), by = 1)){
is_prior_probs[i] <- rlang::eval_tidy(str2lang(paste0('p', prior_dist, '(', 'q', lim_dist, '(', prior_probs[i], ',', lim_args_proc, ')', ',', prior_args_proc, ')')))
samples_df$prior_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', prior_dist, '(', prior_probs[i], ',', prior_args_proc, ')')))
samples_df$is_prior_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', prior_dist, '(', is_prior_probs[i], ',', prior_args_proc, ')')))
samples_df$lim_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', lim_dist, '(', lim_probs[i], ',', lim_args_proc, ')')))
samples_df$is_lik[i] <- rlang::eval_tidy(str2lang(paste0('d', lim_dist, '(', samples_df$is_prior_samples[i], ',',  lim_args_proc, ')')))
samples_df$corr_lik[i] <- rlang::eval_tidy(str2lang(paste0('d', prior_dist, '(', samples_df$is_prior_samples[i], ',',  prior_args_proc, ')')))
if (samples_df$is_prior_samples[i] > samples_df$lim_samples[i]){
q <- q + (samples_df$corr_lik[i] / samples_df$is_lik[i])
} else {
q <- q + 0
}
}
ExpCost_prior <- min((1 / n_samples) * q * (ExpCost_lim_ex),
ExpCost_rm + (rm_lim_ex * ExpCost_lim_ex))
}
ExpCost_prior
if (grepl(pattern = 'lhs', x = method)){
prior_probs <- lhs::randomLHS(n = n_samples, k = 1)
lim_probs <- lhs::randomLHS(n = n_samples, k = 1)
} else {
prior_probs <- runif(n = n_samples)
lim_probs <- runif(n = n_samples)
# } else if (method == 'is') {
#
#   is_prior_probs <- rlang::eval_tidy(str2lang(paste0('p', prior_dist, '(', 'r', lim_dist, '(', n_samples, ',', lim_args_proc, ')', ',', prior_args_proc, ')')))
#   prior_probs <- runif(n = n_samples)
#   lim_probs <- runif(n = n_samples)
#
# } else if (method = 'is+lhs'){
#
#   prior_probs <- lhs::randomLHS(n = n_samples, k = 1)
#   lim_probs <- lhs::randomLHS(n = n_samples, k = 1)
}
if (grepl(pattern = 'is', x = method)) {
samples_df <- data.frame(prior_samples = double(length = n_samples), is_prior_samples = double(length = n_samples),
lim_samples = double(length = n_samples),
is_lik = double(length = n_samples), corr_lik = double(length = n_samples))
q <- 0
for (i in seq(from = 1, to = nrow(samples_df), by = 1)){
is_prior_probs[i] <- rlang::eval_tidy(str2lang(paste0('p', prior_dist, '(', 'q', lim_dist, '(', prior_probs[i], ',', lim_args_proc, ')', ',', prior_args_proc, ')')))
samples_df$prior_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', prior_dist, '(', prior_probs[i], ',', prior_args_proc, ')')))
samples_df$is_prior_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', prior_dist, '(', is_prior_probs[i], ',', prior_args_proc, ')')))
samples_df$lim_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', lim_dist, '(', lim_probs[i], ',', lim_args_proc, ')')))
samples_df$is_lik[i] <- rlang::eval_tidy(str2lang(paste0('d', lim_dist, '(', samples_df$is_prior_samples[i], ',',  lim_args_proc, ')')))
samples_df$corr_lik[i] <- rlang::eval_tidy(str2lang(paste0('d', prior_dist, '(', samples_df$is_prior_samples[i], ',',  prior_args_proc, ')')))
if (samples_df$is_prior_samples[i] > samples_df$lim_samples[i]){
q <- q + (samples_df$corr_lik[i] / samples_df$is_lik[i])
} else {
q <- q + 0
}
}
ExpCost_prior <- min((1 / n_samples) * q * (ExpCost_lim_ex),
ExpCost_rm + (rm_lim_ex * ExpCost_lim_ex))
}
ExpCost_prior
if (grepl(pattern = 'lhs', x = method)){
prior_probs <- lhs::randomLHS(n = n_samples, k = 1)
lim_probs <- lhs::randomLHS(n = n_samples, k = 1)
} else {
prior_probs <- runif(n = n_samples)
lim_probs <- runif(n = n_samples)
# } else if (method == 'is') {
#
#   is_prior_probs <- rlang::eval_tidy(str2lang(paste0('p', prior_dist, '(', 'r', lim_dist, '(', n_samples, ',', lim_args_proc, ')', ',', prior_args_proc, ')')))
#   prior_probs <- runif(n = n_samples)
#   lim_probs <- runif(n = n_samples)
#
# } else if (method = 'is+lhs'){
#
#   prior_probs <- lhs::randomLHS(n = n_samples, k = 1)
#   lim_probs <- lhs::randomLHS(n = n_samples, k = 1)
}
if (grepl(pattern = 'is', x = method)) {
samples_df <- data.frame(prior_samples = double(length = n_samples), is_prior_samples = double(length = n_samples),
lim_samples = double(length = n_samples),
is_lik = double(length = n_samples), corr_lik = double(length = n_samples))
q <- 0
for (i in seq(from = 1, to = nrow(samples_df), by = 1)){
is_prior_probs[i] <- rlang::eval_tidy(str2lang(paste0('p', prior_dist, '(', 'q', lim_dist, '(', prior_probs[i], ',', lim_args_proc, ')', ',', prior_args_proc, ')')))
samples_df$prior_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', prior_dist, '(', prior_probs[i], ',', prior_args_proc, ')')))
samples_df$is_prior_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', prior_dist, '(', is_prior_probs[i], ',', prior_args_proc, ')')))
samples_df$lim_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', lim_dist, '(', lim_probs[i], ',', lim_args_proc, ')')))
samples_df$is_lik[i] <- rlang::eval_tidy(str2lang(paste0('d', lim_dist, '(', samples_df$is_prior_samples[i], ',',  lim_args_proc, ')')))
samples_df$corr_lik[i] <- rlang::eval_tidy(str2lang(paste0('d', prior_dist, '(', samples_df$is_prior_samples[i], ',',  prior_args_proc, ')')))
if (samples_df$is_prior_samples[i] > samples_df$lim_samples[i]){
q <- q + (samples_df$corr_lik[i] / samples_df$is_lik[i])
} else {
q <- q + 0
}
}
ExpCost_prior <- min((1 / n_samples) * q * (ExpCost_lim_ex),
ExpCost_rm + (rm_lim_ex * ExpCost_lim_ex))
}
ExpCost_prior
samples_df <- data.frame(prior_samples = double(length = n_samples), lim_samples = double(length = n_samples))
for (i in seq(from = 1, to = n_samples, by = 1)){
samples_df$prior_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', prior_dist, '(', prior_probs[i], ',', prior_args_proc, ')')))
samples_df$lim_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', lim_dist, '(', lim_probs[i], ',', lim_args_proc, ')')))
}
ExpCost_prior <- min((1 / n_samples) * sum(samples_df$prior_samples > samples_df$lim_samples) * (ExpCost_lim_ex),
ExpCost_rm + (rm_lim_ex * ExpCost_lim_ex))
ExpCost_prior
samples_df <- data.frame(prior_samples = double(length = n_samples), lim_samples = double(length = n_samples))
for (i in seq(from = 1, to = n_samples, by = 1)){
samples_df$prior_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', prior_dist, '(', prior_probs[i], ',', prior_args_proc, ')')))
samples_df$lim_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', lim_dist, '(', lim_probs[i], ',', lim_args_proc, ')')))
}
ExpCost_prior <- min((1 / n_samples) * sum(samples_df$prior_samples > samples_df$lim_samples) * (ExpCost_lim_ex),
ExpCost_rm + (rm_lim_ex * ExpCost_lim_ex))
ExpCost_prior
samples_df <- data.frame(prior_samples = double(length = n_samples), lim_samples = double(length = n_samples))
for (i in seq(from = 1, to = n_samples, by = 1)){
samples_df$prior_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', prior_dist, '(', prior_probs[i], ',', prior_args_proc, ')')))
samples_df$lim_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', lim_dist, '(', lim_probs[i], ',', lim_args_proc, ')')))
}
ExpCost_prior <- min((1 / n_samples) * sum(samples_df$prior_samples > samples_df$lim_samples) * (ExpCost_lim_ex),
ExpCost_rm + (rm_lim_ex * ExpCost_lim_ex))
ExpCost_prior
samples_df <- data.frame(prior_samples = double(length = n_samples), lim_samples = double(length = n_samples))
for (i in seq(from = 1, to = n_samples, by = 1)){
samples_df$prior_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', prior_dist, '(', prior_probs[i], ',', prior_args_proc, ')')))
samples_df$lim_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', lim_dist, '(', lim_probs[i], ',', lim_args_proc, ')')))
}
ExpCost_prior <- min((1 / n_samples) * sum(samples_df$prior_samples > samples_df$lim_samples) * (ExpCost_lim_ex),
ExpCost_rm + (rm_lim_ex * ExpCost_lim_ex))
ExpCost_prior
samples_df <- data.frame(prior_samples = double(length = n_samples), lim_samples = double(length = n_samples))
for (i in seq(from = 1, to = n_samples, by = 1)){
samples_df$prior_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', prior_dist, '(', prior_probs[i], ',', prior_args_proc, ')')))
samples_df$lim_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', lim_dist, '(', lim_probs[i], ',', lim_args_proc, ')')))
}
ExpCost_prior <- min((1 / n_samples) * sum(samples_df$prior_samples > samples_df$lim_samples) * (ExpCost_lim_ex),
ExpCost_rm + (rm_lim_ex * ExpCost_lim_ex))
ExpCost_prior
samples_df <- data.frame(prior_samples = double(length = n_samples), lim_samples = double(length = n_samples))
for (i in seq(from = 1, to = n_samples, by = 1)){
samples_df$prior_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', prior_dist, '(', prior_probs[i], ',', prior_args_proc, ')')))
samples_df$lim_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', lim_dist, '(', lim_probs[i], ',', lim_args_proc, ')')))
}
ExpCost_prior <- min((1 / n_samples) * sum(samples_df$prior_samples > samples_df$lim_samples) * (ExpCost_lim_ex),
ExpCost_rm + (rm_lim_ex * ExpCost_lim_ex))
ExpCost_prior
samples_df <- data.frame(prior_samples = double(length = n_samples), lim_samples = double(length = n_samples))
for (i in seq(from = 1, to = n_samples, by = 1)){
samples_df$prior_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', prior_dist, '(', prior_probs[i], ',', prior_args_proc, ')')))
samples_df$lim_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', lim_dist, '(', lim_probs[i], ',', lim_args_proc, ')')))
}
ExpCost_prior <- min((1 / n_samples) * sum(samples_df$prior_samples > samples_df$lim_samples) * (ExpCost_lim_ex),
ExpCost_rm + (rm_lim_ex * ExpCost_lim_ex))
ExpCost_prior
if (grepl(pattern = 'is', x = method)) {
samples_df <- data.frame(prior_samples = double(length = n_samples), is_prior_samples = double(length = n_samples),
lim_samples = double(length = n_samples),
is_lik = double(length = n_samples), corr_lik = double(length = n_samples))
q <- 0
for (i in seq(from = 1, to = nrow(samples_df), by = 1)){
is_prior_probs[i] <- rlang::eval_tidy(str2lang(paste0('p', prior_dist, '(', 'q', lim_dist, '(', prior_probs[i], ',', lim_args_proc, ')', ',', prior_args_proc, ')')))
samples_df$prior_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', prior_dist, '(', prior_probs[i], ',', prior_args_proc, ')')))
samples_df$is_prior_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', prior_dist, '(', is_prior_probs[i], ',', prior_args_proc, ')')))
samples_df$lim_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', lim_dist, '(', lim_probs[i], ',', lim_args_proc, ')')))
samples_df$is_lik[i] <- rlang::eval_tidy(str2lang(paste0('d', lim_dist, '(', samples_df$is_prior_samples[i], ',',  lim_args_proc, ')')))
samples_df$corr_lik[i] <- rlang::eval_tidy(str2lang(paste0('d', prior_dist, '(', samples_df$is_prior_samples[i], ',',  prior_args_proc, ')')))
if (samples_df$is_prior_samples[i] > samples_df$lim_samples[i]){
q <- q + (samples_df$corr_lik[i] / samples_df$is_lik[i])
} else {
q <- q + 0
}
}
ExpCost_prior <- min((1 / n_samples) * q * (ExpCost_lim_ex),
ExpCost_rm + (rm_lim_ex * ExpCost_lim_ex))
} else {
samples_df <- data.frame(prior_samples = double(length = n_samples), lim_samples = double(length = n_samples))
for (i in seq(from = 1, to = n_samples, by = 1)){
samples_df$prior_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', prior_dist, '(', prior_probs[i], ',', prior_args_proc, ')')))
samples_df$lim_samples[i] <- rlang::eval_tidy(str2lang(paste0('q', lim_dist, '(', lim_probs[i], ',', lim_args_proc, ')')))
}
ExpCost_prior <- min((1 / n_samples) * sum(samples_df$prior_samples > samples_df$lim_samples) * (ExpCost_lim_ex),
ExpCost_rm + (rm_lim_ex * ExpCost_lim_ex))
}
ExpCost_prior
VoPI_int_df <- cbind(samples_df, data.frame(prob_lim_ex = double(length = n_samples), ExpCost = double(length = n_samples))) %>%
dplyr::arrange(samples_df$is_prior_samples) %>%
mutate(prob_lim_ex = corr_lik / is_lik)
head(VoPI_int_df)
VoPI_int_df <- cbind(samples_df, data.frame(prob_lim_ex = double(length = n_samples), ExpCost = double(length = n_samples))) %>%
mutate(prob_lim_ex = corr_lik / is_lik)
head(VoPI_int_df)
VoPI_int_df <- cbind(samples_df, data.frame(prob_lim_ex = double(length = n_samples), ExpCost = double(length = n_samples)))
head(VoPI_int_df)
for(i in seq(from = 1, to = n_samples, by = 1)){
VoPI_int_df$prob_lim_ex[i] <- rlang::eval_tidy(str2lang(paste0('p', lim_dist, '(', VoPI_int_df$is_prior_samples[i], ',', lim_args_proc, ')')))
VoPI_int_df$prob_lim_ex[i] <- VoPI_int_df$prob_lim_ex[i] * VoPI_int_df$corr_lik[i] / VoPI_int_df$is_lik[i]
VoPI_int_df$ExpCost[i] <- min(VoPI_int_df$prob_lim_ex[i] * (ExpCost_lim_ex),
ExpCost_rm + (rm_lim_ex * ExpCost_lim_ex))
}
VoPI_int_df <- VoPI_int_df %>%
mutate(opt_act = case_when(
ExpCost == ExpCost_rm + (rm_lim_ex * ExpCost_lim_ex) ~ 'Risk mitigation',
TRUE ~ 'No action'
))
opt_action_prior <- case_when(
ExpCost_prior == ExpCost_rm + (rm_lim_ex * ExpCost_lim_ex) ~ 'Risk mitigation',
TRUE ~ 'No action'
)
ExpCost_prepost <- mean(VoPI_int_df$ExpCost)
opt_action_prepost <- case_when(
ExpCost_prepost == ExpCost_rm + (rm_lim_ex * ExpCost_lim_ex) ~ 'Risk mitigation',
TRUE ~ 'No action'
)
Exp_VoPI <- max(0, (ExpCost_prior - ExpCost_prepost))
VoPI_df <- data.frame(ExpCost_prior, opt_action_prior, ExpCost_prepost, opt_action_prepost,
Exp_VoPI, sampling_method = method, n_samples = n_samples)
VoPI_df
head(VoPI_int_df)
summary(VoPI_int_df$prob_lim_ex)
VoPI_int_df <- cbind(samples_df, data.frame(prob_lim_ex = double(length = n_samples), ExpCost = double(length = n_samples)))
for(i in seq(from = 1, to = n_samples, by = 1)){
#      VoPI_int_df$prob_lim_ex[i] <- rlang::eval_tidy(str2lang(paste0('p', lim_dist, '(', VoPI_int_df$is_prior_samples[i], ',', lim_args_proc, ')')))
VoPI_int_df$prob_lim_ex[i] <- VoPI_int_df$corr_lik[i] / VoPI_int_df$is_lik[i]
VoPI_int_df$ExpCost[i] <- min(VoPI_int_df$prob_lim_ex[i] * (ExpCost_lim_ex),
ExpCost_rm + (rm_lim_ex * ExpCost_lim_ex))
}
head(VoPI_int_df)
?dbplyr::as.sql()
?dbplyr::as.sql(df %>% arrange())
dbplyr::as.sql(df %>% arrange())
dbplyr::as.sql('df %>% arrange()')
dbplyr::as.sql('arrange()')
dbplyr::as.sql('dplyr::arrange()')
dbplyr::as.sql(dplyr::arrange)
dbplyr
df
df_db <- df %>%
arrange(m) %>%
filter(m > 100)
df_db %>% show_query()
library(dbplyr)
df_db <- df %>%
arrange(m) %>%
filter(m > 100)
df_db %>% show_query()
detach(dbplyr)
detach('dbplyr')
detach_package('dbplyr')
detach('package::dbplyr')
detach('package::dbplyr', unload = TRUE)
