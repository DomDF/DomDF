shiny::runApp('~/R/Shiny/Priors')
source('~/GitHub/DomDF/R/tidy_hmc_draws.R')
library(cmdstanr)
SN_model <- cmdstan_model(stan_file = '~/PhD/Thesis/Figures/SN_fp.stan')
library(cmdstanr); library(tidyverse)
data_SN <- readxl::read_excel(path = "~/LaTeX/BayesianModel/dataSN.xlsx")
SN_model <- cmdstan_model(stan_file = '~/PhD/Thesis/Figures/SN_fp.stan')
SN_model$check_syntax()
SN_model$code()
SN_data <- list(n_data = nrow(data_SN),
N = data_SN$N,
S = data_SN$S,
n_pp = nrow(data_SN),
S_pp = data_SN$S,
mu_A = 11, sigma_A = 1,
mu_m = 3, sigma_m = 1,
rate_sigma = 1)
wu <- 1e3; draws <- 1e3; n_chains <- 4; par_chains <- parallel::detectCores()
SN_model$sample(data = SN_data, seed = 1008, chains = n_chains, cores = parallel::detectCores(),
iter_warmup = n_wu, iter_sampling = n_draws, thin = thinning, adapt_delta = 0.9)
SN_model$sample(data = SN_data, seed = 1008,
chains = n_chains, parallel_chains = parallel::detectCores(),
iter_warmup = n_wu, iter_sampling = n_draws, thin = thinning,
adapt_delta = 0.9)
n_wu <- 1e3; n_draws <- 1e3; n_chains <- 4; thinning <- 1
SN_model$sample(data = SN_data, seed = 1008,
chains = n_chains, parallel_chains = parallel::detectCores(),
iter_warmup = n_wu, iter_sampling = n_draws, thin = thinning,
adapt_delta = 0.9)
SN_fit <- SN_model$sample(data = SN_data, seed = 1008,
chains = n_chains, parallel_chains = parallel::detectCores(),
iter_warmup = n_wu, iter_sampling = n_draws, thin = thinning,
adapt_delta = 0.9)
SN_fit$summary()
SN_fit$metadata()
SN_fit$metadata()$stan_variables
vars <- SN_fit$metadata()$stan_variables
vars
cmdstan_fit <- SN_fit
params <- cmdstan_fit$metadata()$stan_variables
params
params[1]
c(params)
cmdstan_fit$cmdstan_diagnose()
cmdstan_fit$time()
cmdstan_fit$data_file()
cmdstan_fit$latent_dynamics_files()
cmdstan_fit$num_chains()
cmdstan_fit$num_procs()
cmdstan_fit$output()
cmdstan_fit$sampler_diagnostics()
vars <- cmdstan_fit$metadata()$model_params
length(vars)
vars
cmdstan_fit$draws(variables = vars)
draws_array <- cmdstan_fit$draws(variables = vars)
draws_array["102"]
draws_array[1]
draws_array[1, 1, ]
draws_array[1, 1, 1]
for (v in vars){}
for (v in vars){print(v)}
for (v in length(vars)){print(v)}
for (v in 1:length(vars)){print(v)}
hmc <- data.frame(Parameter = character(), Chain = integer(), Iteration = integer(), draws = double())
hmc
hmc <- data.frame(Parameter = character(), Chain = integer(), Iteration = integer(), draws = double()) %>%
as_tibble()
hmc
cmdstan_fit$metadata()
draws_array[,1,1]
draws_array[,1,1]$chain
draws_array[,1,1][1]
draws_array[,1,1] %>% as.vector()
tibble(Parameter = character(), Chain = integer(), Iteration = integer(), draws = double())
n_params <- length(vars)
n_chains <- cmdstan_fit$num_chains()
n_draws <- cmdstan_fit$metadata()$iter_sampling
thinning <- cmdstan_fit$metadata()$thin
draws_array <- cmdstan_fit$draws(variables = vars)
hmc <- tibble(Parameter = character(), Chain = integer(), Iteration = integer(), draws = double())
hmc <- tibble(Parameter = character(), Chain = integer(), Iteration = integer(), draws = double())
for (chain in 1:n_chains){
for (var in 1:length(vars)){
int_tibble <- tibble(Parameter = vars[var],
Chain = chain,
Iteration = seq(from = 1, to = n_draws, by = thinning),
draws = draws_array[,chain, vars[var]] %>% as.vector())
hmc <- rbind(hmc, int_tibble)
}
}
hmc
params <- c(A, m)
params <- c('A', 'm')
vars <- params
n_params <- length(vars)
n_chains <- cmdstan_fit$num_chains()
n_draws <- cmdstan_fit$metadata()$iter_sampling
thinning <- cmdstan_fit$metadata()$thin
draws_array <- cmdstan_fit$draws(variables = vars)
hmc <- tibble(Parameter = character(), Chain = integer(), Iteration = integer(), draws = double())
for (chain in 1:n_chains){
for (var in 1:length(vars)){
int_tibble <- tibble(Parameter = vars[var],
Chain = chain,
Iteration = seq(from = 1, to = n_draws, by = thinning),
draws = draws_array[,chain, vars[var]] %>% as.vector())
hmc <- rbind(hmc, int_tibble)
}
}
hmc
hmc %>% View()
Bayesian_model_fit <- cmdstan_fit
tidy_hmc_draws <- function(cmdstan_fit, params = 'all_params'){
require(cmdstanr); require(tidyverse)
if (params == 'all_params'){
vars <- cmdstan_fit$metadata()$model_params
} else {vars <- params}
n_params <- length(vars)
n_chains <- cmdstan_fit$num_chains()
n_draws <- cmdstan_fit$metadata()$iter_sampling
thinning <- cmdstan_fit$metadata()$thin
draws_array <- cmdstan_fit$draws(variables = vars)
hmc_tibble <- tibble(Parameter = character(), Chain = integer(), Iteration = integer(), draws = double())
for (chain in 1:n_chains){
for (var in 1:length(vars)){
int_tibble <- tibble(Parameter = vars[var],
Chain = chain,
Iteration = seq(from = 1, to = n_draws, by = thinning),
draws = draws_array[,chain, vars[var]] %>% as.vector())
hmc_tibble <- rbind(hmc_tibble, int_tibble)
}
}
return(hmc_tibble)
}
tidy_hmc_draws(cmdstan_fit = Bayesian_model_fit, params = c('A', 'm')) #Where 'A' and 'm' are parameters in the Stan program.
tidy_hmc_draws <- function(cmdstan_fit, params = 'all_params'){
require(cmdstanr); require(tidyverse)
if (length(params) == 1 & params == 'all_params'){
vars <- cmdstan_fit$metadata()$model_params
} else {vars <- params}
n_params <- length(vars)
n_chains <- cmdstan_fit$num_chains()
n_draws <- cmdstan_fit$metadata()$iter_sampling
thinning <- cmdstan_fit$metadata()$thin
draws_array <- cmdstan_fit$draws(variables = vars)
hmc_tibble <- tibble(Parameter = character(), Chain = integer(), Iteration = integer(), draws = double())
for (chain in 1:n_chains){
for (var in 1:length(vars)){
int_tibble <- tibble(Parameter = vars[var],
Chain = chain,
Iteration = seq(from = 1, to = n_draws, by = thinning),
draws = draws_array[,chain, vars[var]] %>% as.vector())
hmc_tibble <- rbind(hmc_tibble, int_tibble)
}
}
return(hmc_tibble)
}
tidy_hmc_draws(cmdstan_fit = Bayesian_model_fit, params = c('A', 'm')) #Where 'A' and 'm' are parameters in the Stan program.
tidy_hmc_draws <- function(cmdstan_fit, params = 'all_params'){
require(cmdstanr); require(tidyverse)
if (length(params) == 1 & params[1] == 'all_params'){
vars <- cmdstan_fit$metadata()$model_params
} else {vars <- params}
n_params <- length(vars)
n_chains <- cmdstan_fit$num_chains()
n_draws <- cmdstan_fit$metadata()$iter_sampling
thinning <- cmdstan_fit$metadata()$thin
draws_array <- cmdstan_fit$draws(variables = vars)
hmc_tibble <- tibble(Parameter = character(), Chain = integer(), Iteration = integer(), draws = double())
for (chain in 1:n_chains){
for (var in 1:length(vars)){
int_tibble <- tibble(Parameter = vars[var],
Chain = chain,
Iteration = seq(from = 1, to = n_draws, by = thinning),
draws = draws_array[,chain, vars[var]] %>% as.vector())
hmc_tibble <- rbind(hmc_tibble, int_tibble)
}
}
return(hmc_tibble)
}
tidy_hmc_draws(cmdstan_fit = Bayesian_model_fit, params = c('A', 'm')) #Where 'A' and 'm' are parameters in the Stan program.
tidy_hmc_draws <- function(cmdstan_fit, params = 'all_params'){
require(cmdstanr); require(tidyverse)
if (length(params) == 1 & params[1] == 'all_params'){
vars <- cmdstan_fit$metadata()$model_params
} else {vars <- params}
n_params <- length(vars)
n_chains <- cmdstan_fit$num_chains()
n_draws <- cmdstan_fit$metadata()$iter_sampling
thinning <- cmdstan_fit$metadata()$thin
draws_array <- cmdstan_fit$draws(variables = vars)
hmc_tibble <- tibble(Parameter = character(), Chain = integer(), Iteration = integer(), Samples = double())
for (chain in 1:n_chains){
for (var in 1:length(vars)){
int_tibble <- tibble(Parameter = vars[var],
Chain = chain,
Iteration = seq(from = 1, to = n_draws, by = thinning),
Samples = draws_array[,chain, vars[var]] %>% as.vector())
hmc_tibble <- rbind(hmc_tibble, int_tibble)
}
}
return(hmc_tibble)
}
tidy_hmc_draws(cmdstan_fit = Bayesian_model_fit, params = c('A', 'm')) #Where 'A' and 'm' are parameters in the Stan program.
tidy_hmc_draws <- function(cmdstan_fit, params = 'all_params'){
require(cmdstanr); require(tidyverse)
if (length(params) == 1 & params[1] == 'all_params'){
vars <- cmdstan_fit$metadata()$model_params
} else {vars <- params}
n_params <- length(vars)
n_chains <- cmdstan_fit$num_chains()
n_draws <- cmdstan_fit$metadata()$iter_sampling
thinning <- cmdstan_fit$metadata()$thin
draws_array <- cmdstan_fit$draws(variables = vars)
hmc_tibble <- tibble(Parameter = factor(), Chain = integer(), Iteration = integer(), Samples = double())
for (chain in 1:n_chains){
for (var in 1:length(vars)){
int_tibble <- tibble(Parameter = vars[var],
Chain = chain,
Iteration = seq(from = 1, to = n_draws, by = thinning),
Samples = draws_array[,chain, vars[var]] %>% as.vector())
hmc_tibble <- rbind(hmc_tibble, int_tibble)
}
}
return(hmc_tibble)
}
tidy_hmc_draws(cmdstan_fit = Bayesian_model_fit, params = c('A', 'm')) #Where 'A' and 'm' are parameters in the Stan program.
tidy_hmc_draws <- function(cmdstan_fit, params = 'all_params'){
require(cmdstanr); require(tidyverse)
if (length(params) == 1 & params[1] == 'all_params'){
vars <- cmdstan_fit$metadata()$model_params
} else {vars <- params}
n_params <- length(vars)
n_chains <- cmdstan_fit$num_chains()
n_draws <- cmdstan_fit$metadata()$iter_sampling
thinning <- cmdstan_fit$metadata()$thin
draws_array <- cmdstan_fit$draws(variables = vars)
hmc_tibble <- tibble(Parameter = factor(), Chain = integer(), Iteration = integer(), Samples = double())
for (chain in 1:n_chains){
for (var in 1:length(vars)){
int_tibble <- tibble(Parameter = as.factor(vars[var]),
Chain = chain,
Iteration = seq(from = 1, to = n_draws, by = thinning),
Samples = draws_array[,chain, vars[var]] %>% as.vector())
hmc_tibble <- rbind(hmc_tibble, int_tibble)
}
}
return(hmc_tibble)
}
tidy_hmc_draws(cmdstan_fit = Bayesian_model_fit, params = c('A', 'm')) #Where 'A' and 'm' are parameters in the Stan program.
tidy_hmc_draws <- function(cmdstan_fit, params = 'all_params'){
require(cmdstanr); require(tidyverse)
if (length(params) == 1 & params[1] == 'all_params'){
vars <- cmdstan_fit$metadata()$model_params
} else {vars <- params}
n_params <- length(vars)
n_chains <- cmdstan_fit$num_chains()
n_draws <- cmdstan_fit$metadata()$iter_sampling
thinning <- cmdstan_fit$metadata()$thin
draws_array <- cmdstan_fit$draws(variables = vars)
hmc_tibble <- tibble(Parameter = factor(), Chain = integer(), Iteration = integer(), Samples = double())
for (chain in 1:n_chains){
for (var in 1:length(vars)){
int_tibble <- tibble(Parameter = as.factor(vars[var]),
Chain = as.factor(chain),
Iteration = seq(from = 1, to = n_draws, by = thinning),
Samples = draws_array[,chain, vars[var]] %>% as.vector())
hmc_tibble <- rbind(hmc_tibble, int_tibble)
}
}
return(hmc_tibble)
}
tidy_hmc_draws(cmdstan_fit = Bayesian_model_fit, params = c('A', 'm')) #Where 'A' and 'm' are parameters in the Stan program.
tidy_hmc_draws <- function(cmdstan_fit, params = 'all_params'){
require(cmdstanr); require(tidyverse)
if (length(params) == 1 & params[1] == 'all_params'){
vars <- cmdstan_fit$metadata()$model_params
} else {vars <- params}
n_params <- length(vars)
n_chains <- cmdstan_fit$num_chains()
n_draws <- cmdstan_fit$metadata()$iter_sampling
thinning <- cmdstan_fit$metadata()$thin
draws_array <- cmdstan_fit$draws(variables = vars)
hmc_tibble <- tibble(Parameter = character(), Chain = integer(), Iteration = integer(), Samples = double())
for (chain in 1:n_chains){
for (var in 1:length(vars)){
int_tibble <- tibble(Parameter = as.factor(vars[var]),
Chain = as.factor(chain),
Iteration = seq(from = 1, to = n_draws, by = thinning),
Samples = draws_array[,chain, vars[var]] %>% as.vector())
hmc_tibble <- rbind(hmc_tibble, int_tibble)
}
}
return(hmc_tibble)
}
tidy_hmc_draws(cmdstan_fit = Bayesian_model_fit, params = c('A', 'm')) #Where 'A' and 'm' are parameters in the Stan program.
tidy_hmc_draws <- function(cmdstan_fit, params = 'all_params'){
require(cmdstanr); require(tidyverse)
if (length(params) == 1 & params[1] == 'all_params'){
vars <- cmdstan_fit$metadata()$model_params
} else {vars <- params}
n_params <- length(vars)
n_chains <- cmdstan_fit$num_chains()
n_draws <- cmdstan_fit$metadata()$iter_sampling
thinning <- cmdstan_fit$metadata()$thin
draws_array <- cmdstan_fit$draws(variables = vars)
hmc_tibble <- tibble(Parameter = character(), Chain = integer(), Iteration = integer(), Samples = double())
for (chain in 1:n_chains){
for (var in 1:length(vars)){
int_tibble <- tibble(Parameter = as.factor(vars[var]),
Chain = as.factor(chain),
Iteration = as.integer(seq(from = 1, to = n_draws, by = thinning)),
Samples = draws_array[,chain, vars[var]] %>% as.vector())
hmc_tibble <- rbind(hmc_tibble, int_tibble)
}
}
return(hmc_tibble)
}
tidy_hmc_draws(cmdstan_fit = Bayesian_model_fit, params = c('A', 'm')) #Where 'A' and 'm' are parameters in the Stan program.
tidy_hmc_draws(cmdstan_fit = Bayesian_model_fit)
source('~/GitHub/DomDF/R/tidy_mcmc_draws.R')
library(roxygen2)
library(devtools)
document()
rm(list = c("lnorm_params", "tidy_mcmc_draws"))
document()
source('~/GitHub/DomDF/R/tidy_mcmc_draws.R')
Metropolis_RW(n_dims = 1, iterations = 1e3, mu_prior = 0, var_prior = 10, mu_lik = 3, var_lik = 1)
source('~/GitHub/DomDF/R/tidy_mcmc_draws.R')
Metropolis_RW <- function(n_dims, iterations, mu_prior, var_prior, mu_lik, var_lik,
n_chains = 4, n_burn_in = iterations/2, x_initials = 'default',
prop_var = 1, annealing = 1, MCMC_seed = 1008, thinning = 1){
require(mvtnorm); require(tidyverse)
n_dims <- as.integer(n_dims); if(n_dims < 1) stop('Please provide a positive integer number of dimensions: n_dim')
if(x_initials == 'default') {
x_initials <- seq(from = -n_dims, to = n_dims, length.out = n_dims * n_chains)
} else {x_initials <- x_initials}
set.seed(seed = MCMC_seed)
if(n_dims > 1){
x <- data.frame(matrix(ncol = n_dims))
df_MetRW <- cbind(data.frame(Chain = integer(length = 1), Iteration = integer(length = 1), t = double(length = 1),
d_trial = double(length = 1), d_prop = double(length = 1)), x)
} else {
df_MetRW <- data.frame(Chain = integer(), Iteration = integer(), t = double(),
d_trial = double(), d_prop = double(), x = double())
}
for(chain in seq(from = 1, to = n_chains, by = 1)){
t <- 1; iter <- 0; d_trial <- 0; d_prop <- 0; n_iter <- iterations
if(n_dims > 1) {
x <- x_initials[seq(from = chain, to = n_dims * n_chains, by = n_chains)]
for(i in seq(from = 1, to = n_iter, by = 1)){
new_iter <- iter + 1;
prop <- x + rmvnorm(n = 1, mean = rep(x = 0, times = n_dims),
sigma = diag(x = prop_var,
nrow = n_dims, ncol = n_dims))
d_trial <- prod(c(mvtnorm::dmvnorm(x = x, mean = mu_prior, sigma = var_prior),
mvtnorm::dmvnorm(x = x, mean = mu_lik, sigma = var_lik)))
d_prop <- prod(c(mvtnorm::dmvnorm(x = prop, mean = mu_prior, sigma = var_prior),
mvtnorm::dmvnorm(x = prop, mean = mu_lik, sigma = var_lik)))
t <- t * annealing  #'Simulated Annealing'
if(d_prop > d_trial){
iter <- new_iter; x <- prop
} else{
if(t * runif(1) < (d_prop / d_trial)){
iter <- new_iter; x <- prop
} else {
iter <- new_iter
}
}
df_MetRW <- rbind(df_MetRW,
cbind(data.frame(Chain = chain, Iteration = iter, t, d_trial, d_prop),
data.frame(matrix(data = x, ncol = n_dims))))
}
} else {
x <- x_initials[chain]
for(i in seq(from = 1, to = n_iter, by = 1)){
new_iter <- iter + 1;
prop <- x + rnorm(n = 1, sd = sqrt(prop_var))
d_trial <- prod(c(dnorm(x = x, mean = mu_prior, sd = sqrt(var_prior)),
dnorm(x = x, mean = mu_lik, sd = sqrt(var_lik))))
d_prop <- prod(c(dnorm(x = prop, mean = mu_prior, sd = sqrt(var_prior)),
dnorm(x = prop, mean = mu_lik, sd = sqrt(var_lik))))
t <- t * annealing  #'Simulated Annealing'
if(d_prop > d_trial){
iter <- new_iter; x <- prop
} else{
if(t * runif(1) < (d_prop / d_trial)){
iter <- new_iter; x <- prop
} else {
iter <- new_iter
}
}
df_MetRW <- rbind(df_MetRW, data.frame(Chain = chain, Iteration = iter, x, t, d_trial, d_prop))
}
}
}
if(n_dims > 1){
df_MetRW <- df_MetRW[-1,]
df_MetRW <- df_MetRW %>%
dplyr::mutate(status = dplyr::case_when(
iter < n_burn_in ~ 'burn_in',
TRUE ~ 'sample'
)) %>%
tidyr::pivot_longer(cols = colnames(df_MetRW[,grepl(pattern = 'X|x',
x = colnames(df_MetRW))]),
names_to = 'Parameter')
} else{
df_MetRW <- df_MetRW %>%
dplyr::mutate(status = dplyr::case_when(
iter < n_burn_in ~ 'burn_in',
TRUE ~ 'sample'
)) %>%
tidyr::pivot_longer(cols = colnames(df_MetRW %>%
select(x)),
names_to = 'Parameter')
}
if (thinning != 1) {
df_MetRW <- df_MetRW %>%
filter(iter %% thinning == 0) %>%
mutate(iter = iter / thinning)
}
return(df_MetRW)
}
Metropolis_RW(n_dims = 1, iterations = 1e3, mu_prior = 0, var_prior = 10, mu_lik = 3, var_lik = 1)
Metropolis_RW(n_dims = 2, iterations = 1e3, mu_prior = c(0, 0), var_prior = diag(2), mu_lik = c(3, 3), var_lik = diag(2))
type(Bayesian_model_fit)
str(Bayesian_model_fit)
str(Bayesian_model_fit)$Classes
Bayesian_model_fit$metadata()
source('~/GitHub/DomDF/R/tidy_mcmc_draws.R')
one_dim_mcmc_samples <- Metropolis_RW(n_dims = 1, iterations = 1e3, mu_prior = 0, var_prior = 10, mu_lik = 3, var_lik = 1)
Metropolis_traceplot(mcmc_data = four_dim_mcmc_samples)
Metropolis_traceplot(mcmc_data = one_dim_mcmc_samples)
one_dim_mcmc_samples
Metropolis_traceplot <- function(mcmc_data, include_burn_in = FALSE, alpha = 0.4){
require(tidyverse)
if (include_burn_in == FALSE) {
ggplot(data = mcmc_data %>%
dplyr::filter(status == 'sample'), mapping = aes(x = Iteration, y = value))+
geom_line(mapping = aes(col = as.factor(chain)), alpha = alpha)+
facet_wrap(facets = ~ Parameter, ncol = 1)+
DomDF::theme_ddf_light() + labs(col = 'Chain') + theme(legend.title = element_text())
} else {
ggplot(data = mcmc_data,
mapping = aes(x = Iteration, y = value))+
geom_line(mapping = aes(col = as.factor(chain)), alpha = alpha)+
geom_vline(xintercept = min((mcmc_data %>%
dplyr::filter(status == 'sample'))$Iteration),
linetype = 2)+
facet_wrap(facets = ~ Parameter, ncol = 1)+
DomDF::theme_ddf_light() + labs(col = 'Chain') + theme(legend.title = element_text())
}
}
Metropolis_traceplot(mcmc_data = one_dim_mcmc_samples)
one_dim_mcmc_samples
one_dim_mcmc_samples %>% View()
Metropolis_traceplot <- function(mcmc_data, include_burn_in = FALSE, alpha = 0.4){
require(tidyverse)
if (include_burn_in == FALSE) {
ggplot(data = mcmc_data %>%
dplyr::filter(status == 'sample'), mapping = aes(x = Iteration, y = value))+
geom_line(mapping = aes(col = as.factor(Chain)), alpha = alpha)+
facet_wrap(facets = ~ Parameter, ncol = 1)+
DomDF::theme_ddf_light() + labs(col = 'Chain') + theme(legend.title = element_text())
} else {
ggplot(data = mcmc_data,
mapping = aes(x = Iteration, y = value))+
geom_line(mapping = aes(col = as.factor(Chain)), alpha = alpha)+
geom_vline(xintercept = min((mcmc_data %>%
dplyr::filter(status == 'sample'))$Iteration),
linetype = 2)+
facet_wrap(facets = ~ Parameter, ncol = 1)+
DomDF::theme_ddf_light() + labs(col = 'Chain') + theme(legend.title = element_text())
}
}
Metropolis_traceplot(mcmc_data = one_dim_mcmc_samples)
Metropolis_traceplot <- function(mcmc_data, include_burn_in = FALSE, alpha = 0.4){
require(tidyverse)
if (include_burn_in == FALSE) {
ggplot(data = mcmc_data %>%
dplyr::filter(status == 'sample'), mapping = aes(x = Iteration, y = value))+
geom_line(mapping = aes(col = as.factor(Chain)), alpha = alpha)+
facet_wrap(facets = ~ Parameter, ncol = 1)+
scale_colour_viridis_d()+
DomDF::theme_ddf_light() + labs(col = 'Chain') + theme(legend.title = element_text())
} else {
ggplot(data = mcmc_data,
mapping = aes(x = Iteration, y = value))+
geom_line(mapping = aes(col = as.factor(Chain)), alpha = alpha)+
geom_vline(xintercept = min((mcmc_data %>%
dplyr::filter(status == 'sample'))$Iteration),
linetype = 2)+
facet_wrap(facets = ~ Parameter, ncol = 1)+
scale_colour_viridis_d()+
DomDF::theme_ddf_light() + labs(col = 'Chain') + theme(legend.title = element_text())
}
}
Metropolis_traceplot(mcmc_data = one_dim_mcmc_samples)
document
document()
rm(list = c("Metropolis_RW", "Metropolis_traceplot", "tidy_mcmc_draws"))
document()
document()
document()
library(roxygen2)
library(devtools)
document()
source('~/GitHub/DomDF/R/tidy_mcmc_draws.R')
library(devtools)
library(roxygen2)
document()
