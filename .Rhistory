}
} else {
x <- x_initials[chain]
for(i in seq(from = 1, to = n_iter, by = 1)){
new_iter <- iter + 1;
prop <- x + rnorm(n = 1, sd = sqrt(prop_var))
d_trial <- prod(c(dnorm(x = x, mean = mu_prior, sd = sqrt(var_prior)),
dnorm(x = x, mean = mu_lik, sd = sqrt(var_lik))))
d_prop <- prod(c(dnorm(x = prop, mean = mu_prior, sd = sqrt(var_prior)),
dnorm(x = prop, mean = mu_lik, sd = sqrt(var_lik))))
t <- t * annealing  #'Simulated Annealing'
if(d_prop > d_trial){
iter <- new_iter; x <- prop
} else{
if(t * runif(1) < (d_prop / d_trial)){
iter <- new_iter; x <- prop
} else {
iter <- new_iter
}
}
df_MetRW <- rbind(df_MetRW, data.frame(chain, iter, x, t, d_trial, d_prop))
}
}
}
if(n_dims > 1){
df_MetRW <- df_MetRW[-1,]
}
df_MetRW <- df_MetRW %>%
dplyr::mutate(status = dplyr::case_when(
iter < n_burn_in ~ 'burn_in',
TRUE ~ 'sample'
)) %>%
tidyr::pivot_longer(cols = colnames(df_MetRW[,grepl(pattern = 'X|x',
x = colnames(df_MetRW))]),
names_to = 'parameter')
return(df_MetRW)
}
df_1d <- Metropolis_RW(n_dims = 1, iterations = 1e3, mu_prior = 0, var_prior = 3, mu_lik = 3, var_lik = 2, n_chains = 3, n_burn_in = 200, prop_var = 1, annealing = 1, MCMC_seed = 1)
df_1d
df_1d %>%
tidyr::pivot_longer(cols = colnames(df_1d[, grepl(pattern = 'x', x = colnames(df_1d))]), names_to = 'parameter')
df_1d[, grepl(pattern = 'x', x = colnames(df_1d))]
head(df_1d)
head(df_1d[,grepl(pattern = 'x', x = colnames(df_1d))])
str(ddf_1d)
str(df_1d)
df_1d %>% select(x|X)
df_1d %>% select(x, X)
df_1d %>% select(x)
colnames(df_1d %>% select(x))
df_1d <- df_1d %>%
dplyr::mutate(status = dplyr::case_when(
iter < n_burn_in ~ 'burn_in',
TRUE ~ 'sample'
)) %>%
tidyr::pivot_longer(cols = colnames(df_1d %>%
select(x)),
names_to = 'parameter')
df_1d
Metropolis_RW <- function(n_dims, iterations, mu_prior, var_prior, mu_lik, var_lik,
n_chains = 4, n_burn_in = iterations/2, x_initials,
prop_var = 1, annealing = 1, MCMC_seed = 1008){
n_dims <- as.integer(n_dims); if(n_dims < 1) stop('Please provide a positive integer number of dimensions: n_dim')
x_initials <- seq(from = -n_dims, to = n_dims, length.out = n_dims * n_chains)
set.seed(seed = MCMC_seed)
if(n_dims > 1){
x <- data.frame(matrix(ncol = n_dims))
df_MetRW <- cbind(data.frame(chain = integer(length = 1), iter = integer(length = 1), t = double(length = 1),
d_trial = double(length = 1), d_prop = double(length = 1)), x)
} else {
df_MetRW <- data.frame(chain = integer(), iter = integer(), t = double(),
d_trial = double(), d_prop = double(), x = double())
}
for(chain in seq(from = 1, to = n_chains, by = 1)){
iter <- 0; d_trial <- 0; d_prop <- 0; n_iter <- iterations
if(n_dims > 1) {
x <- x_initials[seq(from = chain, to = n_dims * n_chains, by = n_chains)]
for(i in seq(from = 1, to = n_iter, by = 1)){
new_iter <- iter + 1;
prop <- x + rmvnorm(n = 1, mean = rep(x = 0, times = n_dims),
sigma = diag(x = prop_var,
nrow = n_dims, ncol = n_dims))
d_trial <- prod(c(mvtnorm::dmvnorm(x = x, mean = mu_prior, sigma = var_prior),
mvtnorm::dmvnorm(x = x, mean = mu_lik, sigma = var_lik)))
d_prop <- prod(c(mvtnorm::dmvnorm(x = prop, mean = mu_prior, sigma = var_prior),
mvtnorm::dmvnorm(x = prop, mean = mu_lik, sigma = var_lik)))
t <- t * annealing  #'Simulated Annealing'
if(d_prop > d_trial){
iter <- new_iter; x <- prop
} else{
if(t * runif(1) < (d_prop / d_trial)){
iter <- new_iter; x <- prop
} else {
iter <- new_iter
}
}
df_MetRW <- rbind(df_MetRW,
cbind(data.frame(chain, iter, t, d_trial, d_prop),
data.frame(matrix(data = x, ncol = n_dims))))
}
} else {
x <- x_initials[chain]
for(i in seq(from = 1, to = n_iter, by = 1)){
new_iter <- iter + 1;
prop <- x + rnorm(n = 1, sd = sqrt(prop_var))
d_trial <- prod(c(dnorm(x = x, mean = mu_prior, sd = sqrt(var_prior)),
dnorm(x = x, mean = mu_lik, sd = sqrt(var_lik))))
d_prop <- prod(c(dnorm(x = prop, mean = mu_prior, sd = sqrt(var_prior)),
dnorm(x = prop, mean = mu_lik, sd = sqrt(var_lik))))
t <- t * annealing  #'Simulated Annealing'
if(d_prop > d_trial){
iter <- new_iter; x <- prop
} else{
if(t * runif(1) < (d_prop / d_trial)){
iter <- new_iter; x <- prop
} else {
iter <- new_iter
}
}
df_MetRW <- rbind(df_MetRW, data.frame(chain, iter, x, t, d_trial, d_prop))
}
}
}
if(n_dims > 1){
df_MetRW <- df_MetRW[-1,]
df_MetRW <- df_MetRW %>%
dplyr::mutate(status = dplyr::case_when(
iter < n_burn_in ~ 'burn_in',
TRUE ~ 'sample'
)) %>%
tidyr::pivot_longer(cols = colnames(df_MetRW[,grepl(pattern = 'X|x',
x = colnames(df_MetRW))]),
names_to = 'parameter')
} else{
df_MetRW <- df_MetRW %>%
dplyr::mutate(status = dplyr::case_when(
iter < n_burn_in ~ 'burn_in',
TRUE ~ 'sample'
)) %>%
tidyr::pivot_longer(cols = colnames(df_MetRW %>%
select(x)),
names_to = 'parameter')
}
return(df_MetRW)
}
df_1d <- Metropolis_RW(n_dims = 1, iterations = 1e3, mu_prior = 0, var_prior = 3, mu_lik = 3, var_lik = 2, n_chains = 3, n_burn_in = 200, prop_var = 1, annealing = 1, MCMC_seed = 1)
head(df_1d)
df_4d <- Metropolis_RW(n_dims = 4, iterations = 1e3, mu_prior = c(0, 0, 0, 0), var_prior = diag(4), mu_lik = c(3, 3, 3, 3), var_lik = diag(4), n_chains = 2, n_burn_in = 200, prop_var = 1, annealing = 1, MCMC_seed = 1)
head(df_4d)
Metropolis_traceplot <- function(Metropolis_RW_dataframe, include_burn_in = FALSE, alpha = 0.4){
if (include_burn_in == FALSE) {
ggplot(data = Metropolis_RW_dataframe %>%
dplyr::filter(status == 'sample'), mapping = aes(x = iter, y = value))+
geom_line(mapping = aes(col = as.factor(chain)), alpha = alpha)+
facet_wrap(facets = ~ parameter, ncol = 1)+
theme_ddf_light() + labs(col = 'Chain') + theme(legend.title = element_text())
} else {
ggplot(data = Metropolis_RW_dataframe,
mapping = aes(x = iter, y = value))+
geom_line(mapping = aes(col = as.factor(chain)), alpha = alpha)+
geom_vline(xintercept = max((Metropolis_RW_2d_dataframe %>%
dplyr::filter(status == 'burn-in'))$iter))
facet_wrap(facets = ~ parameter, ncol = 1)+
theme_ddf_light() + labs(col = 'Chain') + theme(legend.title = element_text())
}
}
Metropolis_traceplot(Metropolis_RW_dataframe = df_1d)
Metropolis_traceplot(Metropolis_RW_dataframe = df_4d)
head(df_1d %>%
dplyr::filter(row_number() %% 10 == 1))
head(df_1d %>%
dplyr::filter(row_number() %% 10 == 0))
head(df_1d %>%
dplyr::filter(row_number() %% 10 == 0) %>% )
head(df_1d %>%
dplyr::filter(row_number() %% 10 == 0) %>%
mutate(iter = iter /10))
Metropolis_RW <- function(n_dims, iterations, mu_prior, var_prior, mu_lik, var_lik,
n_chains = 4, n_burn_in = iterations/2, x_initials,
prop_var = 1, annealing = 1, MCMC_seed = 1008, thinning = 1){
n_dims <- as.integer(n_dims); if(n_dims < 1) stop('Please provide a positive integer number of dimensions: n_dim')
x_initials <- seq(from = -n_dims, to = n_dims, length.out = n_dims * n_chains)
set.seed(seed = MCMC_seed)
if(n_dims > 1){
x <- data.frame(matrix(ncol = n_dims))
df_MetRW <- cbind(data.frame(chain = integer(length = 1), iter = integer(length = 1), t = double(length = 1),
d_trial = double(length = 1), d_prop = double(length = 1)), x)
} else {
df_MetRW <- data.frame(chain = integer(), iter = integer(), t = double(),
d_trial = double(), d_prop = double(), x = double())
}
for(chain in seq(from = 1, to = n_chains, by = 1)){
iter <- 0; d_trial <- 0; d_prop <- 0; n_iter <- iterations
if(n_dims > 1) {
x <- x_initials[seq(from = chain, to = n_dims * n_chains, by = n_chains)]
for(i in seq(from = 1, to = n_iter, by = 1)){
new_iter <- iter + 1;
prop <- x + rmvnorm(n = 1, mean = rep(x = 0, times = n_dims),
sigma = diag(x = prop_var,
nrow = n_dims, ncol = n_dims))
d_trial <- prod(c(mvtnorm::dmvnorm(x = x, mean = mu_prior, sigma = var_prior),
mvtnorm::dmvnorm(x = x, mean = mu_lik, sigma = var_lik)))
d_prop <- prod(c(mvtnorm::dmvnorm(x = prop, mean = mu_prior, sigma = var_prior),
mvtnorm::dmvnorm(x = prop, mean = mu_lik, sigma = var_lik)))
t <- t * annealing  #'Simulated Annealing'
if(d_prop > d_trial){
iter <- new_iter; x <- prop
} else{
if(t * runif(1) < (d_prop / d_trial)){
iter <- new_iter; x <- prop
} else {
iter <- new_iter
}
}
df_MetRW <- rbind(df_MetRW,
cbind(data.frame(chain, iter, t, d_trial, d_prop),
data.frame(matrix(data = x, ncol = n_dims))))
}
} else {
x <- x_initials[chain]
for(i in seq(from = 1, to = n_iter, by = 1)){
new_iter <- iter + 1;
prop <- x + rnorm(n = 1, sd = sqrt(prop_var))
d_trial <- prod(c(dnorm(x = x, mean = mu_prior, sd = sqrt(var_prior)),
dnorm(x = x, mean = mu_lik, sd = sqrt(var_lik))))
d_prop <- prod(c(dnorm(x = prop, mean = mu_prior, sd = sqrt(var_prior)),
dnorm(x = prop, mean = mu_lik, sd = sqrt(var_lik))))
t <- t * annealing  #'Simulated Annealing'
if(d_prop > d_trial){
iter <- new_iter; x <- prop
} else{
if(t * runif(1) < (d_prop / d_trial)){
iter <- new_iter; x <- prop
} else {
iter <- new_iter
}
}
df_MetRW <- rbind(df_MetRW, data.frame(chain, iter, x, t, d_trial, d_prop))
}
}
}
if(n_dims > 1){
df_MetRW <- df_MetRW[-1,]
df_MetRW <- df_MetRW %>%
dplyr::mutate(status = dplyr::case_when(
iter < n_burn_in ~ 'burn_in',
TRUE ~ 'sample'
)) %>%
tidyr::pivot_longer(cols = colnames(df_MetRW[,grepl(pattern = 'X|x',
x = colnames(df_MetRW))]),
names_to = 'parameter')
} else{
df_MetRW <- df_MetRW %>%
dplyr::mutate(status = dplyr::case_when(
iter < n_burn_in ~ 'burn_in',
TRUE ~ 'sample'
)) %>%
tidyr::pivot_longer(cols = colnames(df_MetRW %>%
select(x)),
names_to = 'parameter')
}
if (thinning != 1) {
df_MetRW <- df_MetRW %>%
filter(row_number() %% thinning == 0) %>%
mutate(iter = iter / thinning)
}
return(df_MetRW)
}
df_4d <- Metropolis_RW(n_dims = 4, iterations = 1e3, mu_prior = c(0, 0, 0, 0), var_prior = diag(4), mu_lik = c(3, 3, 3, 3), var_lik = diag(4), n_chains = 2, n_burn_in = 200, prop_var = 1, annealing = 1, MCMC_seed = 1, thinning = 2)
head(df_4d)
nrow(df_4d)
df_4d <- Metropolis_RW(n_dims = 4, iterations = 1e3, mu_prior = c(0, 0, 0, 0), var_prior = diag(4), mu_lik = c(3, 3, 3, 3), var_lik = diag(4), n_chains = 2, n_burn_in = 200, prop_var = 1, annealing = 1, MCMC_seed = 1, thinning = 5)
nrow(df_4d)
head(df_4d)
Metropolis_RW <- function(n_dims, iterations, mu_prior, var_prior, mu_lik, var_lik,
n_chains = 4, n_burn_in = iterations/2, x_initials,
prop_var = 1, annealing = 1, MCMC_seed = 1008, thinning = 1){
n_dims <- as.integer(n_dims); if(n_dims < 1) stop('Please provide a positive integer number of dimensions: n_dim')
x_initials <- seq(from = -n_dims, to = n_dims, length.out = n_dims * n_chains)
set.seed(seed = MCMC_seed)
if(n_dims > 1){
x <- data.frame(matrix(ncol = n_dims))
df_MetRW <- cbind(data.frame(chain = integer(length = 1), iter = integer(length = 1), t = double(length = 1),
d_trial = double(length = 1), d_prop = double(length = 1)), x)
} else {
df_MetRW <- data.frame(chain = integer(), iter = integer(), t = double(),
d_trial = double(), d_prop = double(), x = double())
}
for(chain in seq(from = 1, to = n_chains, by = 1)){
iter <- 0; d_trial <- 0; d_prop <- 0; n_iter <- iterations
if(n_dims > 1) {
x <- x_initials[seq(from = chain, to = n_dims * n_chains, by = n_chains)]
for(i in seq(from = 1, to = n_iter, by = 1)){
new_iter <- iter + 1;
prop <- x + rmvnorm(n = 1, mean = rep(x = 0, times = n_dims),
sigma = diag(x = prop_var,
nrow = n_dims, ncol = n_dims))
d_trial <- prod(c(mvtnorm::dmvnorm(x = x, mean = mu_prior, sigma = var_prior),
mvtnorm::dmvnorm(x = x, mean = mu_lik, sigma = var_lik)))
d_prop <- prod(c(mvtnorm::dmvnorm(x = prop, mean = mu_prior, sigma = var_prior),
mvtnorm::dmvnorm(x = prop, mean = mu_lik, sigma = var_lik)))
t <- t * annealing  #'Simulated Annealing'
if(d_prop > d_trial){
iter <- new_iter; x <- prop
} else{
if(t * runif(1) < (d_prop / d_trial)){
iter <- new_iter; x <- prop
} else {
iter <- new_iter
}
}
df_MetRW <- rbind(df_MetRW,
cbind(data.frame(chain, iter, t, d_trial, d_prop),
data.frame(matrix(data = x, ncol = n_dims))))
}
} else {
x <- x_initials[chain]
for(i in seq(from = 1, to = n_iter, by = 1)){
new_iter <- iter + 1;
prop <- x + rnorm(n = 1, sd = sqrt(prop_var))
d_trial <- prod(c(dnorm(x = x, mean = mu_prior, sd = sqrt(var_prior)),
dnorm(x = x, mean = mu_lik, sd = sqrt(var_lik))))
d_prop <- prod(c(dnorm(x = prop, mean = mu_prior, sd = sqrt(var_prior)),
dnorm(x = prop, mean = mu_lik, sd = sqrt(var_lik))))
t <- t * annealing  #'Simulated Annealing'
if(d_prop > d_trial){
iter <- new_iter; x <- prop
} else{
if(t * runif(1) < (d_prop / d_trial)){
iter <- new_iter; x <- prop
} else {
iter <- new_iter
}
}
df_MetRW <- rbind(df_MetRW, data.frame(chain, iter, x, t, d_trial, d_prop))
}
}
}
if(n_dims > 1){
df_MetRW <- df_MetRW[-1,]
df_MetRW <- df_MetRW %>%
dplyr::mutate(status = dplyr::case_when(
iter < n_burn_in ~ 'burn_in',
TRUE ~ 'sample'
)) %>%
tidyr::pivot_longer(cols = colnames(df_MetRW[,grepl(pattern = 'X|x',
x = colnames(df_MetRW))]),
names_to = 'parameter')
} else{
df_MetRW <- df_MetRW %>%
dplyr::mutate(status = dplyr::case_when(
iter < n_burn_in ~ 'burn_in',
TRUE ~ 'sample'
)) %>%
tidyr::pivot_longer(cols = colnames(df_MetRW %>%
select(x)),
names_to = 'parameter')
}
if (thinning != 1) {
df_MetRW <- df_MetRW %>%
filter(iter %% thinning == 0) %>%
mutate(iter = iter / thinning)
}
return(df_MetRW)
}
df_4d <- Metropolis_RW(n_dims = 4, iterations = 1e3, mu_prior = c(0, 0, 0, 0), var_prior = diag(4), mu_lik = c(3, 3, 3, 3), var_lik = diag(4), n_chains = 2, n_burn_in = 200, prop_var = 1, annealing = 1, MCMC_seed = 1, thinning = 5)
head(df_4d)
nrow(df_4d)
df_4d <- Metropolis_RW(n_dims = 4, iterations = 1e3, mu_prior = c(0, 0, 0, 0), var_prior = diag(4), mu_lik = c(3, 3, 3, 3), var_lik = diag(4), n_chains = 2, n_burn_in = 200, prop_var = 1, annealing = 1, MCMC_seed = 1, thinning = 1)
nrow(df_4d)
setwd("./DomDF")
document()
setwd("~/GitHub/DomDF/DomDF")
document()
setwd("~/GitHub/DomDF/DomDF")
document()
setwd("..")
install("DomDF")
library(DomDF)
rm(list = ls())
library(tidyverse)
std_plot <- ggplot(data = txhousing, mapping = aes(x = date, y = median))+
geom_point(alpha = 0.2, col = 'black')+
ggtitle('ggplot(data = txhousing, \nmapping = aes(x = date, y = median)) +\ngeom_point(alpha = 0.2)')
ddf_light_plot <- std_plot +
geom_point(alpha = 0.2, col = 'grey20')+
theme_ddf_light()+
ggtitle('... + theme_ddf_light()')
ddf_dark_plot <- std_plot+
geom_point(alpha = 0.2, col = 'white')+
theme_ddf_dark()+
ggtitle('... + theme_ddf_dark()')
library(patchwork)
comp_plot <- std_plot + ddf_light_plot + ddf_dark_plot
comp_plot
df_4d <- Metropolis_RW(n_dims = 4, iterations = 1e3, mu_prior = c(0, 0, 0, 0), var_prior = diag(4), mu_lik = c(3, 3, 3, 3), var_lik = diag(4))
df_4d <- Metropolis_RW(n_dims = 4, iterations = 1e3, mu_prior = c(0, 0, 0, 0), var_prior = diag(4), mu_lik = c(3, 3, 3, 3), var_lik = diag(4), annealing = 1)
DomDF::Metropolis_RW(n_dims = 2, iterations = 500, mu_prior = c(0, 0), var_prior = diag(2), mu_lik = c(3, 3), var_lik = diag(2), n_chains = 2)
document()
setwd("~/GitHub/DomDF/DomDF")
document()
setwd("..")
install("DomDF")
library(DomDF)
DomDF::Metropolis_RW(n_dims = 2, iterations = 500, mu_prior = c(0, 0), var_prior = diag(2), mu_lik = c(3, 3), var_lik = diag(2), n_chains = 2)
mcmc_df <- DomDF::Metropolis_RW(n_dims = 2, iterations = 500, mu_prior = c(0, 0), var_prior = diag(2), mu_lik = c(3, 3), var_lik = diag(2), n_chains = 2)
DomDF::Metropolis_traceplot(Metropolis_RW_dataframe = mcmc_df)
devtools::install_github(repo = 'DomDF/DomDF')
library(DomDF)
Metropolis_RW(n_dims = 1, iterations = 1e3, mu_prior = 0, var_prior = 10, mu_lik = 3, var_lik = 1, n_chains = 3, n_burn_in = 1e2)
mcmc_df <- Metropolis_RW(n_dims = 1, iterations = 1e3, mu_prior = 0, var_prior = 10, mu_lik = 3, var_lik = 1, n_chains = 3, n_burn_in = 1e2)
Metropolis_traceplot(Metropolis_RW_dataframe = mcmc_df)
mcmc_df <- Metropolis_RW(n_dims = 3, iterations = 1e3, mu_prior = c(0, 0, 0), var_prior = diag(3),
mu_lik = c(3, 3, 3), var_lik = diag(3), n_chains = 3, n_burn_in = 1e2)
Metropolis_traceplot(Metropolis_RW_dataframe = mcmc_df)
mcmc_df <- Metropolis_RW(n_dims = 3, iterations = 5e3, mu_prior = c(0, 0, 0), var_prior = diag(3),
mu_lik = c(3, 3, 3), var_lik = diag(3), n_chains = 3, n_burn_in = 1e2, thinning = 10)
Metropolis_traceplot(Metropolis_RW_dataframe = mcmc_df)
library(ggplot2); library(extrafont)
# ggplot2::theme_set(theme_ddf_light())
std_plot <- ggplot(data = txhousing, mapping = aes(x = date, y = median))+
geom_point(alpha = 0.2, col = 'black')+
ggtitle('ggplot(data = txhousing, \nmapping = aes(x = date, y = median)) +\ngeom_point(alpha = 0.2)')
ddf_light_plot <- std_plot +
geom_point(alpha = 0.2, col = 'grey20')+
theme_ddf_light()+
ggtitle('... + theme_ddf_light()')
ddf_dark_plot <- std_plot+
geom_point(alpha = 0.2, col = 'white')+
theme_ddf_dark()+
ggtitle('... + theme_ddf_dark()')
library(patchwork)
std_plot + ddf_light_plot + ddf_dark_plot
std_plot <- ggplot(data = txhousing, mapping = aes(x = date, y = median))+
geom_point(alpha = 0.1, col = 'black')+
ggtitle('ggplot(data = txhousing, \nmapping = aes(x = date, y = median)) +\ngeom_point(alpha = 0.2)')
std_plot
std_plot +
theme_ddf_light()+
ggtitle('... + theme_ddf_light()')
std_plot+
theme_ddf_dark()+
ggtitle('... + theme_ddf_dark()')
std_plot+
geom_point(alpha = 0.2, col = 'white')+
theme_ddf_dark()+
ggtitle('... + theme_ddf_dark()')
# ggplot2::theme_set(theme_ddf_light())
std_plot <- ggplot(data = txhousing, mapping = aes(x = date, y = median))+
geom_point(alpha = 0.1, col = 'black')+
ggtitle('ggplot(data = txhousing, \nmapping = aes(x = date, y = median)) +\ngeom_point(alpha = 0.2)')
ddf_light_plot <- std_plot +
geom_point(alpha = 0.1, col = 'grey20')+
theme_ddf_light()+
ggtitle('... + theme_ddf_light()')
ddf_dark_plot <- std_plot+
geom_point(alpha = 0.1, col = 'white')+
theme_ddf_dark()+
ggtitle('... + theme_ddf_dark()')
library(patchwork)
std_plot + ddf_light_plot + ddf_dark_plot
std_plot <- ggplot(data = txhousing, mapping = aes(x = date, y = median))+
geom_point(alpha = 0.1, col = 'black')+
ggtitle('ggplot(data = txhousing, \nmapping = aes(x = date, y = median)) +\ngeom_point(alpha = 0.1)')
ddf_light_plot <- std_plot +
geom_point(alpha = 0.1, col = 'grey20')+
theme_ddf_light()+
ggtitle('... + theme_ddf_light()')
ddf_dark_plot <- std_plot+
geom_point(alpha = 0.1, col = 'white')+
theme_ddf_dark()+
ggtitle('... + theme_ddf_dark()')
library(patchwork)
std_plot + ddf_light_plot + ddf_dark_plot
Metropolis_traceplot(Metropolis_RW_dataframe = mcmc_df)
Metropolis_traceplot(Metropolis_RW_dataframe = mcmc_df)+
ggtitle(label = 'Metropolis_traceplot(mcmc_df)')
Metropolis_traceplot(Metropolis_RW_dataframe = mcmc_df)+
ggtitle(label = 'Metropolis_traceplot(Metropolis_RW()')
Metropolis_traceplot(Metropolis_RW_dataframe = mcmc_df)+
ggtitle(label = 'Metropolis_traceplot(Metropolis_RW())')
Metropolis_traceplot(Metropolis_RW_dataframe = mcmc_df)+
ggtitle(label = 'Metropolis_traceplot(Metropolis_RW(n_dims = 3, iterations = 5e3))')
Metropolis_traceplot(Metropolis_RW_dataframe = mcmc_df)+
ggtitle(label = 'Metropolis_traceplot(Metropolis_RW(n_dims = 3, iterations = 5e3,
\nmu_prior = c(0, 0, 0), var_prior = diag(3),
\n mu_lik = c(3, 3, 3), var_lik = diag(3),
\nn_chains = 3, n_burn_in = 1e2, thinning = 10))')
Metropolis_traceplot(Metropolis_RW_dataframe = mcmc_df)+
ggtitle(label = 'Metropolis_traceplot(Metropolis_RW(n_dims = 3, iterations = 5e3,\nmu_prior = c(0, 0, 0), var_prior = diag(3),
\n mu_lik = c(3, 3, 3), var_lik = diag(3),
\nn_chains = 3, n_burn_in = 1e2, thinning = 10))')
Metropolis_traceplot(Metropolis_RW_dataframe = mcmc_df)+
ggtitle(label = 'Metropolis_traceplot(Metropolis_RW(n_dims = 3, iterations = 5e3,\n\t\tmu_prior = c(0, 0, 0), var_prior = diag(3),
\n mu_lik = c(3, 3, 3), var_lik = diag(3),
\nn_chains = 3, n_burn_in = 1e2, thinning = 10))')
Metropolis_traceplot(Metropolis_RW_dataframe = mcmc_df)+
ggtitle(label = 'Metropolis_traceplot(Metropolis_RW(n_dims = 3, iterations = 5e3,          \nmu_prior = c(0, 0, 0), var_prior = diag(3),          \n mu_lik = c(3, 3, 3), var_lik = diag(3),          \nn_chains = 3, n_burn_in = 1e2, thinning = 10))')
Metropolis_traceplot(Metropolis_RW_dataframe = mcmc_df)+
ggtitle(label = 'Metropolis_traceplot(mcmc_df)')
std_plot + ddf_light_plot + ddf_dark_plot
library(DomDF)
mcmc_df <- Metropolis_RW(n_dims = 3, iterations = 5e3, mu_prior = c(0, 0, 0), var_prior = diag(3),
mu_lik = c(3, 3, 3), var_lik = diag(3), n_chains = 3, n_burn_in = 1e2, thinning = 10)
Metropolis_traceplot(Metropolis_RW_dataframe = mcmc_df)+
ggtitle(label = 'Metropolis_traceplot(mcmc_df)')
mcmc_df <- Metropolis_RW(n_dims = 3, iterations = 1e3, mu_prior = c(0, 0, 0), var_prior = diag(3),
mu_lik = c(3, 3, 3), var_lik = diag(3), n_chains = 3, n_burn_in = 1e2, thinning = 1)
Metropolis_traceplot(Metropolis_RW_dataframe = mcmc_df)+
ggtitle(label = 'Metropolis_traceplot(mcmc_df)')
View(comp_plot)
?Metropolis_RW
