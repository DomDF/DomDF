scale_x_continuous(name = expression(paste(Log[10], '(Number of Samples)')))+
guides(linetype = guide_legend(ncol = 2))
VoPI_df
ggplot(data = VoPI_df %>%
mutate(sampling_method = factor(x = sampling_method,
levels = c('Crude Monte Carlo',
'Importance Sampling (IS)',
'Latin Hypercube Sampling (LHS)',
'IS with LHS'))),
mapping = aes(x = log10(n_samples), y = Exp_VoPI))+
geom_point(shape = 1)+
geom_line(mapping = aes(linetype = as.factor(sampling_method)), alpha = 0.5)+
geom_text(data = VoPI %>% filter(id == 1),
mapping = aes(x = c(1.5, 1.5, 1.6, 1.5), y = Exp_VoPI,
label = sampling_method),
size = 3, family = 'Cambria')+
scale_linetype_manual(values = c(2, 3, 5, 1))+
ggthemes::theme_base(base_size = 12, base_family = 'Cambria')+
theme(legend.title = element_blank(), legend.position = 'top',
plot.background = element_rect(colour = NA))+
scale_y_continuous(name = 'Expected Value of Perfect Information', labels = scales::label_dollar())+
scale_x_continuous(name = expression(paste(Log[10], '(Number of Samples)')))+
guides(linetype = guide_legend(ncol = 2))
VoPI %>% filter(id == 1)
VoPI_df <- rbind(mc_df, lhs_df, is_df, ilhs_df) %>%
group_by(sampling_method) %>%
mutate(id = row_number()) %>%
ungroup() %>%
mutate(sampling_method = case_when(
sampling_method == 'mc' ~ 'Crude Monte Carlo',
sampling_method == 'lhs' ~ 'Latin Hypercube Sampling (LHS)',
sampling_method == 'is' ~ 'Importance Sampling (IS)',
sampling_method == 'is+lhs' ~ 'IS with LHS'
))
VoPI_df
ggplot(data = VoPI_df %>%
mutate(sampling_method = factor(x = sampling_method,
levels = c('Crude Monte Carlo',
'Importance Sampling (IS)',
'Latin Hypercube Sampling (LHS)',
'IS with LHS'))),
mapping = aes(x = log10(n_samples), y = Exp_VoPI))+
geom_point(shape = 1)+
geom_line(mapping = aes(linetype = as.factor(sampling_method)), alpha = 0.5)+
geom_text(data = VoPI_df %>% filter(id == 1),
mapping = aes(x = c(1.5, 1.5, 1.6, 1.5), y = Exp_VoPI,
label = sampling_method),
size = 3, family = 'Cambria')+
scale_linetype_manual(values = c(2, 3, 5, 1))+
ggthemes::theme_base(base_size = 12, base_family = 'Cambria')+
theme(legend.title = element_blank(), legend.position = 'top',
plot.background = element_rect(colour = NA))+
scale_y_continuous(name = 'Expected Value of Perfect Information', labels = scales::label_dollar())+
scale_x_continuous(name = expression(paste(Log[10], '(Number of Samples)')))+
guides(linetype = guide_legend(ncol = 2))
VoPI_df <- rbind(mc_df, lhs_df, is_df, ilhs_df) %>%
group_by(sampling_method) %>%
mutate(id = row_number()) %>%
ungroup() %>%
mutate(method = case_when(
sampling_method == 'mc' ~ 'Monte Carlo (MC)',
sampling_method == 'lhs' ~ 'Latin Hypercube Sampling (LHS)',
sampling_method == 'is' ~ 'Importance Sampling (IS)',
sampling_method == 'is+lhs' ~ 'IS with LHS'
)) %>%
mutate(sampling_method = str_to_upper(sampling_method))
VoPI_df
ggplot(data = VoPI_df %>%
mutate(method = factor(x = method,
levels = c('Monte Carlo (MC)',
'Importance Sampling (IS)',
'Latin Hypercube Sampling (LHS)',
'IS with LHS'))),
mapping = aes(x = log10(n_samples), y = Exp_VoPI))+
geom_point(shape = 1)+
geom_line(mapping = aes(linetype = method), alpha = 0.5)+
geom_text(data = VoPI_df %>% filter(id == 1),
mapping = aes(x = c(1.5, 1.5, 1.6, 1.5), y = Exp_VoPI,
label = sampling_method),
size = 3, family = 'Cambria')+
scale_linetype_manual(values = c(2, 3, 5, 1))+
ggthemes::theme_base(base_size = 12, base_family = 'Cambria')+
theme(legend.title = element_blank(), legend.position = 'top',
plot.background = element_rect(colour = NA))+
scale_y_continuous(name = 'Expected Value of Perfect Information', labels = scales::label_dollar())+
scale_x_continuous(name = expression(paste(Log[10], '(Number of Samples)')))+
guides(linetype = guide_legend(ncol = 2))
ggplot(data = VoPI_df %>%
mutate(method = factor(x = method,
levels = c('Monte Carlo (MC)',
'Importance Sampling (IS)',
'Latin Hypercube Sampling (LHS)',
'IS with LHS'))),
mapping = aes(x = log10(n_samples), y = Exp_VoPI))+
geom_point(shape = 1)+
geom_line(mapping = aes(linetype = method), alpha = 0.5)+
geom_text(data = VoPI_df %>% filter(id == 1),
mapping = aes(x = c(1.6, 1.6, 1.7, 1.6), y = Exp_VoPI,
label = sampling_method),
size = 3, family = 'Cambria')+
scale_linetype_manual(values = c(2, 3, 5, 1))+
ggthemes::theme_base(base_size = 12, base_family = 'Cambria')+
theme(legend.title = element_blank(), legend.position = 'top',
plot.background = element_rect(colour = NA))+
scale_y_continuous(name = 'Expected Value of Perfect Information', labels = scales::label_dollar())+
scale_x_continuous(name = expression(paste(Log[10], '(Number of Samples)')))+
guides(linetype = guide_legend(ncol = 2))
ggplot(data = VoPI_df %>%
mutate(method = factor(x = method,
levels = c('Monte Carlo (MC)',
'Importance Sampling (IS)',
'Latin Hypercube Sampling (LHS)',
'IS with LHS'))),
mapping = aes(x = log10(n_samples), y = Exp_VoPI))+
geom_point(shape = 1)+
geom_line(mapping = aes(linetype = method), alpha = 0.5)+
geom_text(data = VoPI_df %>% filter(id == 1),
mapping = aes(x = c(1.6, 1.6, 1.65, 1.6), y = Exp_VoPI,
label = sampling_method),
size = 3, family = 'Cambria')+
scale_linetype_manual(values = c(2, 3, 5, 1))+
ggthemes::theme_base(base_size = 12, base_family = 'Cambria')+
theme(legend.title = element_blank(), legend.position = 'top',
plot.background = element_rect(colour = NA))+
scale_y_continuous(name = 'Expected Value of Perfect Information', labels = scales::label_dollar())+
scale_x_continuous(name = expression(paste(Log[10], '(Number of Samples)')))+
guides(linetype = guide_legend(ncol = 2))
ggplot(data = VoPI_df %>%
mutate(method = factor(x = method,
levels = c('Monte Carlo (MC)',
'Importance Sampling (IS)',
'Latin Hypercube Sampling (LHS)',
'IS with LHS'))),
mapping = aes(x = log10(n_samples), y = Exp_VoPI))+
geom_point(shape = 1)+
geom_line(mapping = aes(linetype = method), alpha = 0.5)+
geom_text(data = VoPI_df %>% filter(id == 1),
mapping = aes(x = c(1.55, 1.55, 1.65, 1.55), y = Exp_VoPI,
label = sampling_method),
size = 3, family = 'Cambria')+
scale_linetype_manual(values = c(2, 3, 5, 1))+
ggthemes::theme_base(base_size = 12, base_family = 'Cambria')+
theme(legend.title = element_blank(), legend.position = 'top',
plot.background = element_rect(colour = NA))+
scale_y_continuous(name = 'Expected Value of Perfect Information', labels = scales::label_dollar())+
scale_x_continuous(name = expression(paste(Log[10], '(Number of Samples)')))+
guides(linetype = guide_legend(ncol = 2))
ggsave(filename = 'VoPI_SA.png', device = 'png', width = 6, height = 4, dpi = 'retina')
ggplot(data = VoPI_df %>%
mutate(method = factor(x = method,
levels = c('Monte Carlo (MC)',
'Importance Sampling (IS)',
'Latin Hypercube Sampling (LHS)',
'IS with LHS'))),
mapping = aes(x = log10(n_samples), y = Exp_VoPI))+
geom_point(shape = 1)+
geom_line(mapping = aes(linetype = method), alpha = 0.5)+
geom_text(data = VoPI_df %>% filter(id == 1),
mapping = aes(x = c(1.5, 1.5, 1.65, 1.5), y = Exp_VoPI,
label = sampling_method),
size = 3, family = 'Cambria')+
scale_linetype_manual(values = c(2, 3, 5, 1))+
ggthemes::theme_base(base_size = 12, base_family = 'Cambria')+
theme(legend.title = element_blank(), legend.position = 'top',
plot.background = element_rect(colour = NA))+
scale_y_continuous(name = 'Expected Value of Perfect Information', labels = scales::label_dollar())+
scale_x_continuous(name = expression(paste(Log[10], '(Number of Samples)')))+
guides(linetype = guide_legend(ncol = 2))
ggsave(filename = 'VoPI_SA.png', device = 'png', width = 6, height = 4, dpi = 'retina')
ggplot(data = VoPI_df %>%
mutate(method = factor(x = method,
levels = c('Monte Carlo (MC)',
'Importance Sampling (IS)',
'Latin Hypercube Sampling (LHS)',
'IS with LHS'))),
mapping = aes(x = log10(n_samples), y = Exp_VoPI))+
geom_point(shape = 1)+
geom_line(mapping = aes(linetype = method), alpha = 0.5)+
geom_text(data = VoPI_df %>% filter(id == 1),
mapping = aes(x = c(1.5, 1.5, 1.65, 1.5), y = Exp_VoPI,
label = sampling_method),
size = 3, family = 'Cambria', nudge_y = c(0, 1, 0, -1))+
scale_linetype_manual(values = c(2, 3, 5, 1))+
ggthemes::theme_base(base_size = 12, base_family = 'Cambria')+
theme(legend.title = element_blank(), legend.position = 'top',
plot.background = element_rect(colour = NA))+
scale_y_continuous(name = 'Expected Value of Perfect Information', labels = scales::label_dollar())+
scale_x_continuous(name = expression(paste(Log[10], '(Number of Samples)')))+
guides(linetype = guide_legend(ncol = 2))
ggplot(data = VoPI_df %>%
mutate(method = factor(x = method,
levels = c('Monte Carlo (MC)',
'Importance Sampling (IS)',
'Latin Hypercube Sampling (LHS)',
'IS with LHS'))),
mapping = aes(x = log10(n_samples), y = Exp_VoPI))+
geom_point(shape = 1)+
geom_line(mapping = aes(linetype = method), alpha = 0.5)+
geom_text(data = VoPI_df %>% filter(id == 1),
mapping = aes(x = c(1.5, 1.5, 1.65, 1.5), y = Exp_VoPI,
label = sampling_method),
size = 3, family = 'Cambria', nudge_y = c(0, 10, 0, -10))+
scale_linetype_manual(values = c(2, 3, 5, 1))+
ggthemes::theme_base(base_size = 12, base_family = 'Cambria')+
theme(legend.title = element_blank(), legend.position = 'top',
plot.background = element_rect(colour = NA))+
scale_y_continuous(name = 'Expected Value of Perfect Information', labels = scales::label_dollar())+
scale_x_continuous(name = expression(paste(Log[10], '(Number of Samples)')))+
guides(linetype = guide_legend(ncol = 2))
ggplot(data = VoPI_df %>%
mutate(method = factor(x = method,
levels = c('Monte Carlo (MC)',
'Importance Sampling (IS)',
'Latin Hypercube Sampling (LHS)',
'IS with LHS'))),
mapping = aes(x = log10(n_samples), y = Exp_VoPI))+
geom_point(shape = 1)+
geom_line(mapping = aes(linetype = method), alpha = 0.5)+
geom_text(data = VoPI_df %>% filter(id == 1),
mapping = aes(x = c(1.5, 1.5, 1.65, 1.5), y = Exp_VoPI,
label = sampling_method),
size = 3, family = 'Cambria', nudge_y = c(0, 100, 0, -100))+
scale_linetype_manual(values = c(2, 3, 5, 1))+
ggthemes::theme_base(base_size = 12, base_family = 'Cambria')+
theme(legend.title = element_blank(), legend.position = 'top',
plot.background = element_rect(colour = NA))+
scale_y_continuous(name = 'Expected Value of Perfect Information', labels = scales::label_dollar())+
scale_x_continuous(name = expression(paste(Log[10], '(Number of Samples)')))+
guides(linetype = guide_legend(ncol = 2))
ggplot(data = VoPI_df %>%
mutate(method = factor(x = method,
levels = c('Monte Carlo (MC)',
'Importance Sampling (IS)',
'Latin Hypercube Sampling (LHS)',
'IS with LHS'))),
mapping = aes(x = log10(n_samples), y = Exp_VoPI))+
geom_point(shape = 1)+
geom_line(mapping = aes(linetype = method), alpha = 0.5)+
geom_text(data = VoPI_df %>% filter(id == 1),
mapping = aes(x = c(1.5, 1.5, 1.65, 1.5), y = Exp_VoPI,
label = sampling_method),
size = 3, family = 'Cambria', nudge_y = c(0, -50, 0, 50))+
scale_linetype_manual(values = c(2, 3, 5, 1))+
ggthemes::theme_base(base_size = 12, base_family = 'Cambria')+
theme(legend.title = element_blank(), legend.position = 'top',
plot.background = element_rect(colour = NA))+
scale_y_continuous(name = 'Expected Value of Perfect Information', labels = scales::label_dollar())+
scale_x_continuous(name = expression(paste(Log[10], '(Number of Samples)')))+
guides(linetype = guide_legend(ncol = 2))
ggplot(data = VoPI_df %>%
mutate(method = factor(x = method,
levels = c('Monte Carlo (MC)',
'Importance Sampling (IS)',
'Latin Hypercube Sampling (LHS)',
'IS with LHS'))),
mapping = aes(x = log10(n_samples), y = Exp_VoPI))+
geom_point(shape = 1)+
geom_line(mapping = aes(linetype = method), alpha = 0.5)+
geom_text(data = VoPI_df %>% filter(id == 1),
mapping = aes(x = c(1.5, 1.5, 1.65, 1.5), y = Exp_VoPI,
label = sampling_method),
size = 3, family = 'Cambria', nudge_y = c(0, -50, 0, 75))+
scale_linetype_manual(values = c(2, 3, 5, 1))+
ggthemes::theme_base(base_size = 12, base_family = 'Cambria')+
theme(legend.title = element_blank(), legend.position = 'top',
plot.background = element_rect(colour = NA))+
scale_y_continuous(name = 'Expected Value of Perfect Information', labels = scales::label_dollar())+
scale_x_continuous(name = expression(paste(Log[10], '(Number of Samples)')))+
guides(linetype = guide_legend(ncol = 2))
ggplot(data = VoPI_df %>%
mutate(method = factor(x = method,
levels = c('Monte Carlo (MC)',
'Importance Sampling (IS)',
'Latin Hypercube Sampling (LHS)',
'IS with LHS'))),
mapping = aes(x = log10(n_samples), y = Exp_VoPI))+
geom_point(shape = 1)+
geom_line(mapping = aes(linetype = method), alpha = 0.5)+
geom_text(data = VoPI_df %>% filter(id == 1),
mapping = aes(x = c(1.5, 1.5, 1.6, 1.5), y = Exp_VoPI,
label = sampling_method),
size = 3, family = 'Cambria', nudge_y = c(0, -50, 0, 75))+
scale_linetype_manual(values = c(2, 3, 5, 1))+
ggthemes::theme_base(base_size = 12, base_family = 'Cambria')+
theme(legend.title = element_blank(), legend.position = 'top',
plot.background = element_rect(colour = NA))+
scale_y_continuous(name = 'Expected Value of Perfect Information', labels = scales::label_dollar())+
scale_x_continuous(name = expression(paste(Log[10], '(Number of Samples)')))+
guides(linetype = guide_legend(ncol = 2))
ggsave(filename = 'VoPI_SA.png', device = 'png', width = 6, height = 4, dpi = 'retina')
ggplot(data = VoPI_df %>%
mutate(method = factor(x = method,
levels = c('Monte Carlo (MC)',
'Importance Sampling (IS)',
'Latin Hypercube Sampling (LHS)',
'IS with LHS'))),
mapping = aes(x = log10(n_samples), y = Exp_VoPI))+
geom_point(shape = 1)+
geom_line(mapping = aes(linetype = method), alpha = 0.5)+
geom_text(data = VoPI_df %>% filter(id == 1),
mapping = aes(x = c(1.5, 1.5, 1.6, 1.5), y = Exp_VoPI,
label = sampling_method),
size = 3, family = 'Cambria', nudge_y = c(0, -50, 0, 100))+
scale_linetype_manual(values = c(2, 3, 5, 1))+
ggthemes::theme_base(base_size = 12, base_family = 'Cambria')+
theme(legend.title = element_blank(), legend.position = 'top',
plot.background = element_rect(colour = NA))+
scale_y_continuous(name = 'Expected Value of Perfect Information', labels = scales::label_dollar())+
scale_x_continuous(name = expression(paste(Log[10], '(Number of Samples)')))+
guides(linetype = guide_legend(ncol = 2))
ggsave(filename = 'VoPI_SA.png', device = 'png', width = 6, height = 4, dpi = 'retina')
ggplot(data = VoPI_df %>%
mutate(method = factor(x = method,
levels = c('Monte Carlo (MC)',
'Importance Sampling (IS)',
'Latin Hypercube Sampling (LHS)',
'IS with LHS'))),
mapping = aes(x = log10(n_samples), y = Exp_VoPI))+
geom_point(shape = 1)+
geom_line(mapping = aes(linetype = method), alpha = 0.5)+
geom_text(data = VoPI_df %>% filter(id == 1),
mapping = aes(x = c(1.5, 1.5, 1.6, 1.5), y = Exp_VoPI,
label = sampling_method),
size = 3, family = 'Cambria', nudge_y = c(0, -50, 0, 125))+
scale_linetype_manual(values = c(2, 3, 5, 1))+
ggthemes::theme_base(base_size = 12, base_family = 'Cambria')+
theme(legend.title = element_blank(), legend.position = 'top',
plot.background = element_rect(colour = NA))+
scale_y_continuous(name = 'Expected Value of Perfect Information', labels = scales::label_dollar())+
scale_x_continuous(name = expression(paste(Log[10], '(Number of Samples)')))+
guides(linetype = guide_legend(ncol = 2))
ggsave(filename = 'VoPI_SA.png', device = 'png', width = 6, height = 4, dpi = 'retina')
ggplot(data = VoPI_df %>%
mutate(method = factor(x = method,
levels = c('Monte Carlo (MC)',
'Importance Sampling (IS)',
'Latin Hypercube Sampling (LHS)',
'IS with LHS'))),
mapping = aes(x = log10(n_samples), y = Exp_VoPI))+
geom_point(shape = 1)+
geom_line(mapping = aes(linetype = method), alpha = 0.5)+
geom_text(data = VoPI_df %>% filter(id == 1),
mapping = aes(x = c(1.6, 1.5, 1.6, 1.5), y = Exp_VoPI,
label = sampling_method),
size = 3, family = 'Cambria', nudge_y = c(0, -100, 0, 150))+
scale_linetype_manual(values = c(2, 3, 5, 1))+
ggthemes::theme_base(base_size = 12, base_family = 'Cambria')+
theme(legend.title = element_blank(), legend.position = 'top',
plot.background = element_rect(colour = NA))+
scale_y_continuous(name = 'Expected Value of Perfect Information', labels = scales::label_dollar())+
scale_x_continuous(name = expression(paste(Log[10], '(Number of Samples)')))+
guides(linetype = guide_legend(ncol = 2))
ggsave(filename = 'VoPI_SA.png', device = 'png', width = 6, height = 4, dpi = 'retina')
devtools::install_github(repo = 'DomDF/DomDF')
devtools::install_github(repo = 'DomDF/DomDF')
devtools::install_github(repo = 'DomDF/DomDF', force = TRUE)
library(DomDF); library(tidyverse); library(extrafont)
mc_df <- data.frame(ExpCost_prior = double(), ExpCost_prepost = double(),
Exp_VoPI = double(), sampling_method = character(),
n_samples = double()) -> lhs_df
is_df <- lhs_df -> ilhs_df
prior <- 'norm'; prior_params <- list(mean = 1, sd = 2);
limit <- 'norm'; limit_params <- list(mean = 5, sd = 1);
CoF <- 1e5; CoF_rm <- 1e4
samples <- c(50, 100, 250, 500, 1000, 2500, 5000, 10000)
for (n_iterations in samples){
mc_df <- rbind(mc_df, VoPI(prior_dist = prior, prior_args = prior_params,
lim_dist = limit, lim_args = limit_params,
ExpCost_lim_ex = CoF, ExpCost_rm = CoF_rm,
n_samples = n_iterations, method = 'mc'))
lhs_df <- rbind(lhs_df, VoPI(prior_dist = prior, prior_args = prior_params,
lim_dist = limit, lim_args = limit_params,
ExpCost_lim_ex = CoF, ExpCost_rm = CoF_rm,
n_samples = n_iterations, method = 'lhs'))
is_df <- rbind(is_df, VoPI(prior_dist = prior, prior_args = prior_params,
lim_dist = limit, lim_args = limit_params,
ExpCost_lim_ex = CoF, ExpCost_rm = CoF_rm,
n_samples = n_iterations, method = 'is'))
ilhs_df <- rbind(ilhs_df, VoPI(prior_dist = prior, prior_args = prior_params,
lim_dist = limit, lim_args = limit_params,
ExpCost_lim_ex = CoF, ExpCost_rm = CoF_rm,
n_samples = n_iterations, method = 'is+lhs'))
}
VoPI_df <- rbind(mc_df, lhs_df, is_df, ilhs_df) %>%
group_by(sampling_method) %>%
mutate(id = row_number()) %>%
ungroup() %>%
mutate(method = case_when(
sampling_method == 'mc' ~ 'Monte Carlo (MC)',
sampling_method == 'lhs' ~ 'Latin Hypercube Sampling (LHS)',
sampling_method == 'is' ~ 'Importance Sampling (IS)',
sampling_method == 'is+lhs' ~ 'IS with LHS'
)) %>%
mutate(sampling_method = str_to_upper(sampling_method))
ggplot(data = VoPI_df %>%
mutate(method = factor(x = method,
levels = c('Monte Carlo (MC)',
'Importance Sampling (IS)',
'Latin Hypercube Sampling (LHS)',
'IS with LHS'))),
mapping = aes(x = log10(n_samples), y = Exp_VoPI))+
geom_point(shape = 1)+
geom_line(mapping = aes(linetype = method), alpha = 0.5)+
geom_text(data = VoPI_df %>% filter(id == 1),
mapping = aes(x = c(1.6, 1.5, 1.6, 1.5), y = Exp_VoPI,
label = sampling_method),
size = 3, family = 'Cambria', nudge_y = c(0, -100, 0, 150))+
scale_linetype_manual(values = c(2, 3, 5, 1))+
ggthemes::theme_base(base_size = 12, base_family = 'Cambria')+
theme(legend.title = element_blank(), legend.position = 'top',
plot.background = element_rect(colour = NA))+
scale_y_continuous(name = 'Expected Value of Perfect Information', labels = scales::label_dollar())+
scale_x_continuous(name = expression(paste(Log[10], '(Number of Samples)')))+
guides(linetype = guide_legend(ncol = 2))
setwd("~/GitHub")
write.csv(x = VoPI_df, file = 'VoPI_df.csv')
VoPI_df
?DomDF::VoPI()
VoPI(prior_dist = 'exp', prior_args = list(rate = 1),
lim_dist = 'norm', lim_args = list(mean = 3, sd = 1),
ExpCost_lim_ex = 1e5, ExpCost_rm = 10^4)
VoPI(prior_dist = 'exp', prior_args = list(rate = 1),
lim_dist = 'norm', lim_args = list(mean = 3, sd = 1),
ExpCost_lim_ex = 1e5, ExpCost_rm = 10^4, n_samples <- 10^3)
VoPI(prior_dist = 'exp', prior_args = list(rate = 1),
lim_dist = 'norm', lim_args = list(mean = 3, sd = 1),
ExpCost_lim_ex = 1e5, ExpCost_rm = 10^4, n_samples = 10^3)
setwd("~/GitHub/DomDF")
document()
rm(list = c("VoPI"))
document()
document()
devtools::install_github(repo = 'DomDF/DomDF')
?DomDF::VoPI()
VoPI(prior_dist = 'exp', prior_args = list(rate = 1),
lim_dist = 'norm', lim_args = list(mean = 3, sd = 1),
ExpCost_lim_ex = 1e5, ExpCost_rm = 10^4)
VoPI(prior_dist = 'exp', prior_args = list(rate = 1),
lim_dist = 'norm', lim_args = list(mean = 3, sd = 1),
ExpCost_lim_ex = 1e5, ExpCost_rm = 10^4)
document()
devtools::install_github(repo = 'DomDF/DomDF')
?DomDF::Metropolis_RW()
Metropolis_RW(n_dims = 1, iterations = 1e3, mu_prior = 0, var_prior = 10, mu_lik = 3, var_lik = 1)
devtools::install_github(repo = 'DomDF/DomDF')
#' gen_exp_quad_cov
#'
#' Generate an n-dimensional covariance matrix, based on the exponential-quadratic covariance function.
#' Returns either a matrix (tidy = FALSE), a wide tibble (tidy = TRUE, longer = FALSE) or a long tibble (tidy = TRUE, longer = TRUE).
#'
#'
#' @param n_dims The number of dimensions of the covariance matrix - REQUIRED.
#' @param alpha_sq The maximum co-variance - defaults to 1.
#' @param rho_sq The length scale - defaults to 3.
#' @param sigma_sq The (within-dimensional) variance - defaults to 1.
#' @param tidy Logical: If 'TRUE', returns a tibble, if 'FALSE'  returns a matrix - defaults to FALSE.
#' @param longer Logical: If 'TRUE', returns a long-format tibble, if 'FALSE'  returns a wide-format tibble (requires tidy = TRUE) - defaults to FALSE.
#' @keywords
#' @export
#' @examples
#' ten_dim_cov_mat <- cov_mat <- gen_exp_quad_cov(n_dims = 10, tidy = FALSE)
#' ten_dim_cov_tibble_long <- gen_exp_quad_cov(n_dims = 10, tidy = TRUE, longer = TRUE)
gen_exp_quad_cov <- function(n_dims, alpha_sq = 1, rho_sq = 3, sigma_sq = 1,
tidy = FALSE,
longer = FALSE) {
n_dims <- as.integer(n_dims); if(n_dims < 1) stop('Please provide a positive integer number of dimensions: n_dim')
if(sigma_sq < 0) stop('Please provide a non-negtive variance: sigma_sq')
if(rho_sq < 0) stop('Please provide a non-negtive length scale: rho_sq')
cov <- matrix(nrow = n_dims, ncol = n_dims)
for(i in seq(from = 1, to = n_dims, by = 1)){
for(j in seq(from = 1, to = n_dims, by = 1)){
cov[i, j] = alpha_sq * exp(-1/(2 * rho_sq) * (i-j)^2)
}
}
if (tidy == FALSE) {
cov <- cov
} else if (tidy == TRUE){
cov <- cov %>%
as_tibble() %>%
rowid_to_column()
colnames(cov) <- c('id_x', seq(1:n_dims))
cov <- cov %>%
mutate(id_x = as.factor(x = id_x)) %>%
arrange(id_x)
if (longer == FALSE) {
cov <- cov
} else if (longer == TRUE) {
cov <- cov %>%
pivot_longer(cols = -c(id_x),
names_to = 'id_y') %>%
mutate(id_y = as.factor(x = as.numeric(x = id_y))) %>%
arrange(id_x, id_y)
}
}
return(cov)
}
getwd
getwd()
document()
library(roxygen2)
document()
library(devtools)
document()
rm(list = ls())
document()
devtools::install_github(repo = 'DomDF/DomDF')
rm(list = ls())
devtools::install_github(repo = 'DomDF/DomDF')
devtools::install_github(repo = 'DomDF/DomDF')
library(roxygen2)
library(devtools)
document()
