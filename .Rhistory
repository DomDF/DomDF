prior_args_proc <- as_tibble(rbind(prior_args_proc, as.numeric(prior_args[i])))
}
prior_args_proc
as_vector(prior_args_proc)
as_vector(prior_args)
c(as_vector(prior_args))
c(as_vector(prior_args))[1]
c(as_vector(prior_args))[2]
rlang::eval_tidy(str2lang(paste0('r', prior_dist, '(n = ', n_samples, ',', prior_args ')')))
prior_args
rnorm(n = 1, args = prior_args)
rnorm(n = 1, 0, 1)
rnorm(n = 1, prior_args[1], prior_args[2])
rnorm(n = 1, as.numeric(prior_args[1]), as.numeric(prior_args[2]))
rnorm(n = 1, as.numeric(prior_args[1]), as.numeric(prior_args[2]))
rep(x = prior_args[i], times = length(prior_args))
for (i in seq(from = 1, to = length(prior_args), by = 1)){
rep(x = prior_args[i], times = length(prior_args))
}
args <- NULL
for (i in seq(from = 1, to = length(prior_args), by = 1)){
args <- append(args, paste(',',prior_args[i]))
}
args
args <- prior_args[1]
for (i in seq(from = 2, to = length(prior_args), by = 1)){
args <- append(args, paste(',', as.numeric(prior_args[i])))
}
args
args <- as.numeric(prior_args[1])
for (i in seq(from = 2, to = length(prior_args), by = 1)){
args <- append(args, paste(',', as.numeric(prior_args[i])))
}
args
as_vector(args)
as_vector(as_numeric(args))
as_vector(str2lang(args))
args <- as.numeric(prior_args[1])
for (i in seq(from = 2, to = length(prior_args), by = 1)){
args <- paste(args, paste(',', as.numeric(prior_args[i])))
}
args
c(1 , 1)
str2lang(s = paste('c(', args, ')'))
rlang::eval_tidy(str2lang(s = paste('c(', args, ')')))
?distribution
rbeta(1, 1, 1)
rbinom(1, 1, 1)
rbinom(1, 1, 1)
rbinom(1, 1, 1)
rbinom(1, 1, 1)
rbinom(1, 1, 1/2)
rbinom(1, 1, 1/2)
rbinom(1, 1, 1/2)
rbinom(1, 1, 1/2)
rbinom(1, 1, 1/2)
rbinom(1, 1, 1/10)
rbinom(1, 1, 1/10)
rbinom(1, 1, 1/10)
rbinom(1, 1, 1/2)
n_samples <- 10; prior_dist <- 'norm'; prior_args <- list(mean = 1, sd = 1)
prior_args
unlist(prior_args)
unlist(as.numeric(prior_args))
as.numeric(prior_args[1])
prior_args_proc <- as.numeric(prior_args[1])
for (i in seq(from = 2, to = length(prior_args), by = 1)){
prior_args_proc <- paste(prior_args_proc, as.numeric(prior_args[i]))
}
prior_args_proc
prior_args_proc <- as.numeric(prior_args[1])
for (i in seq(from = 2, to = length(prior_args), by = 1)){
prior_args_proc <- paste(prior_args_proc, ',', as.numeric(prior_args[i]))
}
prior_args_proc
rlang::eval_tidy(str2lang(paste0('r', prior_dist, '(n = ', n_samples, ',', prior_args_proc ')')))
paste0('r', prior_dist, '(n = ', n_samples, ',', prior_args_proc ')')
prior_args_proc
paste0('r', prior_dist, '(n = ', n_samples
)
prior_args_proc
paste0('r', prior_dist, '(', n_samples, ',', prior_args_proc ')')
paste0('r', prior_dist, '(', n_samples, ','
)
prior_args_proc
append(paste0('r', prior_dist, '(', n_samples, ','), prior_args_proc ')')
paste('r', prior_dist, '(', n_samples, ',', prior_args_proc ')')
paste('r', prior_dist, '(', n_samples, ',', as.character(prior_args_proc) ')')
prior_args_proc
unlist(prior_args_proc)
paste('r', prior_dist, '(', n_samples, ',', unlist(prior_args_proc) ')')
paste('r', prior_dist, '(', n_samples, ',', prior_args_proc, ')')
rlang::eval_tidy(str2lang(paste0('r', prior_dist, '(', n_samples, ',', prior_args_proc, ')')))
n_samples <- 10; prior_dist <- 'exp'; prior_args <- list(rate = 1)
prior_args_proc <- as.numeric(prior_args[1])
for (i in seq(from = 2, to = length(prior_args), by = 1)){
prior_args_proc <- paste(prior_args_proc, ',', as.numeric(prior_args[i]))
}
rlang::eval_tidy(str2lang(paste0('r', prior_dist, '(', n_samples, ',', prior_args_proc, ')')))
prior_samples
VoPI_df <- data.frame(prior_samples, pr_lim_ex, EU)
VoPI_df <- data.frame(prior_samples, pr_lim_ex = double(length = length(prior_samples)), EU = double(length = length(prior_samples)))
VoPI_df
process_args <- function(args){
process_args <- as.numeric(args[1])
for (i in seq(from = 2, to = length(args), by = 1)){
process_args <- paste(process_args, ',', as.numeric(args[i]))
}
}
prior_args_proc
prior_args_proc <- process_args(args = prior_args)
prior_args
n_samples <- 10; prior_dist <- 'norm'; prior_args <- list(mean = 1, sd = 1)
prior_args_proc <-
as.numeric(prior_args[1])
for (i in seq(from = 2, to = length(prior_args), by = 1)){
prior_args_proc <- paste(prior_args_proc, ',', as.numeric(prior_args[i]))
}
prior_args_proc
prior_args_proc <- process_args(args = prior_args)
prior_args_proc
prior_args
as.numeric(args[1])
as.numeric(prior_args[1])
prior_args_proc <- as.numeric(prior_args[1])
if(length(prior_args) > 1) {
for (i in seq(from = 2, to = length(prior_args), by = 1)){
prior_args_proc <- paste(prior_args_proc, ',', as.numeric(prior_args[i]))
}
}
prior_args_proc
process_args <- function(args){
processed_args <- as.numeric(args[1])
if(length(args > 1)){
for (i in seq(from = 2, to = length(args), by = 1)){
processed_args <- paste(processed_args, ',', as.numeric(args[i]))
}
}
return(processed_args)
}
prior_args_proc <- process_args(args = prior_args)
prior_args_proc
prior_args_proc <- process_args(args = prior_args); lim_args_proc <- process_args(args = lim_args)
n_samples <- 10; prior_dist <- 'exp'; prior_args <- list(rate = 1); lim_dist <- 'norm'; lim_args <- list(mean = 4, sd = 1)
process_args <- function(args){
processed_args <- as.numeric(args[1])
if(length(args > 1)){
for (i in seq(from = 2, to = length(args), by = 1)){
processed_args <- paste(processed_args, ',', as.numeric(args[i]))
}
}
return(processed_args)
}
prior_args_proc <- process_args(args = prior_args); lim_args_proc <- process_args(args = lim_args)
prior_args_proc <- process_args(args = prior_args)
as.numeric(prior_args[1])
length(prior_args)
process_args <- function(args){
processed_args <- as.numeric(args[1])
if(length(args >= 2)){
for (i in seq(from = 2, to = length(args), by = 1)){
processed_args <- paste(processed_args, ',', as.numeric(args[i]))
}
}
return(processed_args)
}
process_args(args = prior_args)
for i in seq(from =1, to = 3)
seq(from =1, to = 3)
seq(from = 2, to = 3)
process_args <- function(args){
processed_args <- as.numeric(args[1])
if(length(args >= 2)){
for (i in seq(from = 2, to = length(args))){
processed_args <- paste(processed_args, ',', as.numeric(args[i]))
}
}
return(processed_args)
}
process_args(args = prior_args)
process_args <- function(args){
processed_args <- as.numeric(args[1])
if(length(args >= 2)){
for (i in seq(from = 2, to = length(args))){
processed_args <- paste(processed_args, ',', as.numeric(args[i]))
}
} else {}
return(processed_args)
}
process_args(args = prior_args)
length(prior_args)
length(prior_args) >1
process_args <- function(args){
processed_args <- as.numeric(args[1])
if(length(args >= 2) == TRUE){
for (i in seq(from = 2, to = length(args))){
processed_args <- paste(processed_args, ',', as.numeric(args[i]))
}
} else {}
return(processed_args)
}
process_args(args = prior_args)
process_args(args = lim_args)
length(lim_args)
process_args <- function(args){
processed_args <- as.numeric(args[1])
if(length(args >= 2) == FALSE){
for (i in seq(from = 2, to = length(args))){
processed_args <- paste(processed_args, ',', as.numeric(args[i]))
}
} else {}
return(processed_args)
}
process_args(args = lim_args)
process_args(args = prior_args)
process_args <- function(args){
processed_args <- as.numeric(args[1])
if(length(args) >= 2){
for (i in seq(from = 2, to = length(args))){
processed_args <- paste(processed_args, ',', as.numeric(args[i]))
}
} else {}
return(processed_args)
}
process_args(args = prior_args)
process_args(args = lim_args)
process_args <- function(args){
processed_args <- paste(as.numeric(args[1]))
if(length(args) >= 2){
for (i in seq(from = 2, to = length(args))){
processed_args <- paste(processed_args, ',', as.numeric(args[i]))
}
} else {}
return(processed_args)
}
process_args(args = prior_args)
process_args(args = lim_args)
head(VoPI_df)
VoPI_df$pr_lim_ex <- rlang::eval_tidy(str2lang(paste0('d', prior_dist, '(', VoPI_df$prior_samples, ',', lim_args_proc, ')')))
n_samples <- 10; prior_dist <- 'exp'; prior_args <- list(rate = 1); lim_dist <- 'norm'; lim_args <- list(mean = 4, sd = 1)
prior_args_proc <- process_args(args = prior_args); lim_args_proc <- process_args(args = lim_args)
VoPI_df$pr_lim_ex <- rlang::eval_tidy(str2lang(paste0('d', prior_dist, '(', VoPI_df$prior_samples, ',', lim_args_proc, ')')))
paste0('d', prior_dist, '(', VoPI_df$prior_samples, ',', lim_args_proc, ')')
dexp(0.336481633596122,4 , 1)
dnorm(x = 0.13, mean = 4, sd = 1)
dnorm(x = 4.13, mean = 4, sd = 1)
dnorm(x = 4, mean = 4, sd = 1)
pnorm(x = 4, mean = 4, sd = 1)
pnorm(4, 4, 1)
pnorm(0.134, 4, 1)
paste0('p', lim_dist, '(', VoPI_df$prior_samples, ',', lim_args_proc, ')')
VoPI_df$pr_lim_ex <- rlang::eval_tidy(str2lang(paste0('p', lim_dist, '(', VoPI_df$prior_samples, ',', lim_args_proc, ')')))
for(i in seq(from = 1, to = n_samples, by = 1)){
VoPI_df$pr_lim_ex[i] <- rlang::eval_tidy(str2lang(paste0('p', lim_dist, '(', VoPI_df$prior_samples[i], ',', lim_args_proc, ')')))
}
head(VoPI_df)
VoPI_df <- data.frame(prior_samples, pr_lim_ex = double(length = length(prior_samples)), EC = double(length = length(prior_samples)))
n_samples <- 10; prior_dist <- 'exp'; prior_args <- list(rate = 1); lim_dist <- 'norm'; lim_args <- list(mean = 4, sd = 1); EC_lim_ex <- 1e6
for(i in seq(from = 1, to = n_samples, by = 1)){
VoPI_df$pr_lim_ex[i] <- rlang::eval_tidy(str2lang(paste0('p', lim_dist, '(', VoPI_df$prior_samples[i], ',', lim_args_proc, ')')))
VoPI_df$EC[i] <- VoPI_df$prior_samples[i] * EC_lim_ex
}
head(VoPI_df)
VoPI_df <- data.frame(prior_samples, prob_lim_ex = double(length = length(prior_samples)), EC = double(length = length(prior_samples)))
for(i in seq(from = 1, to = n_samples, by = 1)){
VoPI_df$prob_lim_ex[i] <- rlang::eval_tidy(str2lang(paste0('p', lim_dist, '(', VoPI_df$prior_samples[i], ',', lim_args_proc, ')')))
VoPI_df$EC[i] <- VoPI_df$prob_lim_ex[i] * EC_lim_ex
}
head(VoPI_df)
VoPI_df <- data.frame(prior_samples, prob_lim_ex = double(length = length(prior_samples)), EC = double(length = length(prior_samples))) %>%
dplyr::arrange(prior_samples)
for(i in seq(from = 1, to = n_samples, by = 1)){
VoPI_df$prob_lim_ex[i] <- rlang::eval_tidy(str2lang(paste0('p', lim_dist, '(', VoPI_df$prior_samples[i], ',', lim_args_proc, ')')))
VoPI_df$EC[i] <- VoPI_df$prob_lim_ex[i] * EC_lim_ex
}
head(VoPI_df)
tail(VoPI_df)
pnorm(q = 10, mean = 4, sd = 1)
n_samples
n_samples = 1e3
VoPI_df <- data.frame(prior_samples, prob_lim_ex = double(length = length(prior_samples)), EC = double(length = length(prior_samples))) %>%
dplyr::arrange(prior_samples)
for(i in seq(from = 1, to = n_samples, by = 1)){
VoPI_df$prob_lim_ex[i] <- rlang::eval_tidy(str2lang(paste0('p', lim_dist, '(', VoPI_df$prior_samples[i], ',', lim_args_proc, ')')))
VoPI_df$EC[i] <- VoPI_df$prob_lim_ex[i] * EC_lim_ex
}
tail(VoPI_df)
lim_samples <- rlang::eval_tidy(str2lang(paste0('r', lim_dist, '(', n_samples, ',', lim_args_proc, ')')))
count(prior_samples > lim_samples)
sum(prior_samples > lim_samples)
sum(prior_samples > lim_samples)/n_samples
(sum(prior_samples > lim_samples)/n_samples) * EC_lim_ex
mean(VoPI_df$EC)
n_samples <- 10; prior_dist <- 'exp'; prior_args <- list(rate = 1/2); lim_dist <- 'norm'; lim_args <- list(mean = 4, sd = 1); EC_lim_ex <- 1e6
process_args <- function(args){
processed_args <- paste(as.numeric(args[1]))
if(length(args) >= 2){
for (i in seq(from = 2, to = length(args))){
processed_args <- paste(processed_args, ',', as.numeric(args[i]))
}
} else {}
return(processed_args)
}
prior_args_proc <- process_args(args = prior_args); lim_args_proc <- process_args(args = lim_args)
prior_samples <- rlang::eval_tidy(str2lang(paste0('r', prior_dist, '(', n_samples, ',', prior_args_proc, ')')))
lim_samples <- rlang::eval_tidy(str2lang(paste0('r', lim_dist, '(', n_samples, ',', lim_args_proc, ')')))
(sum(prior_samples > lim_samples)/n_samples) * EC_lim_ex
head(lim_samples)
head(prior_samples)
mean(prior_samples)
n_samples <- 10; prior_dist <- 'exp'; prior_args <- list(rate = 0.5); lim_dist <- 'norm'; lim_args <- list(mean = 4, sd = 1); EC_lim_ex <- 1e6
process_args <- function(args){
processed_args <- paste(as.numeric(args[1]))
if(length(args) >= 2){
for (i in seq(from = 2, to = length(args))){
processed_args <- paste(processed_args, ',', as.numeric(args[i]))
}
} else {}
return(processed_args)
}
prior_args_proc <- process_args(args = prior_args); lim_args_proc <- process_args(args = lim_args)
prior_samples <- rlang::eval_tidy(str2lang(paste0('r', prior_dist, '(', n_samples, ',', prior_args_proc, ')')))
lim_samples <- rlang::eval_tidy(str2lang(paste0('r', lim_dist, '(', n_samples, ',', lim_args_proc, ')')))
mean(prior_samples)
n_samples <- 10; prior_dist <- 'exp'; prior_args <- list(rate = 0.1); lim_dist <- 'norm'; lim_args <- list(mean = 4, sd = 1); EC_lim_ex <- 1e6
###########
process_args <- function(args){
processed_args <- paste(as.numeric(args[1]))
if(length(args) >= 2){
for (i in seq(from = 2, to = length(args))){
processed_args <- paste(processed_args, ',', as.numeric(args[i]))
}
} else {}
return(processed_args)
}
prior_args_proc <- process_args(args = prior_args); lim_args_proc <- process_args(args = lim_args)
prior_samples <- rlang::eval_tidy(str2lang(paste0('r', prior_dist, '(', n_samples, ',', prior_args_proc, ')')))
lim_samples <- rlang::eval_tidy(str2lang(paste0('r', lim_dist, '(', n_samples, ',', lim_args_proc, ')')))
mean(prior_samples)
n_samples <- 10; prior_dist <- 'exp'; prior_args <- list(rate = 1/2); lim_dist <- 'norm'; lim_args <- list(mean = 4, sd = 1); EC_lim_ex <- 1e6
###########
process_args <- function(args){
processed_args <- paste(as.numeric(args[1]))
if(length(args) >= 2){
for (i in seq(from = 2, to = length(args))){
processed_args <- paste(processed_args, ',', as.numeric(args[i]))
}
} else {}
return(processed_args)
}
prior_args_proc <- process_args(args = prior_args); lim_args_proc <- process_args(args = lim_args)
prior_samples <- rlang::eval_tidy(str2lang(paste0('r', prior_dist, '(', n_samples, ',', prior_args_proc, ')')))
lim_samples <- rlang::eval_tidy(str2lang(paste0('r', lim_dist, '(', n_samples, ',', lim_args_proc, ')')))
mean(prior_samples)
(sum(prior_samples > lim_samples)/n_samples) * EC_lim_ex
(sum(prior_samples > lim_samples)/n_samples)
VoPI_df <- data.frame(prior_samples, prob_lim_ex = double(length = length(prior_samples)), EC = double(length = length(prior_samples))) %>%
dplyr::arrange(prior_samples)
for(i in seq(from = 1, to = n_samples, by = 1)){
VoPI_df$prob_lim_ex[i] <- rlang::eval_tidy(str2lang(paste0('p', lim_dist, '(', VoPI_df$prior_samples[i], ',', lim_args_proc, ')')))
VoPI_df$EC[i] <- VoPI_df$prob_lim_ex[i] * EC_lim_ex
}
mean(VoPI_df$EC)
head(VoPI_df)
sum(prior_samples > lim_samples)
sum(prior_samples > lim_samples) * (EC / n_samples)
sum(prior_samples > lim_samples) * (EC_lim_ex / n_samples)
n_samples
n_samples = 1e3
sum(prior_samples > lim_samples) * (EC_lim_ex / n_samples)
VoPI_df <- data.frame(prior_samples, prob_lim_ex = double(length = length(prior_samples)), EC = double(length = length(prior_samples))) %>%
dplyr::arrange(prior_samples)
for(i in seq(from = 1, to = n_samples, by = 1)){
VoPI_df$prob_lim_ex[i] <- rlang::eval_tidy(str2lang(paste0('p', lim_dist, '(', VoPI_df$prior_samples[i], ',', lim_args_proc, ')')))
VoPI_df$EC[i] <- VoPI_df$prob_lim_ex[i] * EC_lim_ex
}
mean(VoPI_df$EC)
EC_prior <- sum(prior_samples > lim_samples) * (EC_lim_ex / n_samples)
VoPI_df <- data.frame(prior_samples, prob_lim_ex = double(length = length(prior_samples)), EC = double(length = length(prior_samples))) %>%
dplyr::arrange(prior_samples)
for(i in seq(from = 1, to = n_samples, by = 1)){
VoPI_df$prob_lim_ex[i] <- rlang::eval_tidy(str2lang(paste0('p', lim_dist, '(', VoPI_df$prior_samples[i], ',', lim_args_proc, ')')))
VoPI_df$EC[i] <- VoPI_df$prob_lim_ex[i] * (EC_lim_ex / n_samples)
}
EC_prepost <- mean(VoPI_df$EC)
i
n_samples
for(i in seq(from = 1, to = n_samples, by = 1)){
VoPI_df$prob_lim_ex[i] <- rlang::eval_tidy(str2lang(paste0('p', lim_dist, '(', VoPI_df$prior_samples[i], ',', lim_args_proc, ')')))
VoPI_df$EC[i] <- VoPI_df$prob_lim_ex[i] * (EC_lim_ex / n_samples)
}
VoPI_df <- data.frame(prior_samples, prob_lim_ex = double(length = length(prior_samples)), EC = double(length = length(prior_samples))) %>%
dplyr::arrange(prior_samples)
for(i in seq(from = 1, to = n_samples, by = 1)){
VoPI_df$prob_lim_ex[i] <- rlang::eval_tidy(str2lang(paste0('p', lim_dist, '(', VoPI_df$prior_samples[i], ',', lim_args_proc, ')')))
VoPI_df$EC[i] <- VoPI_df$prob_lim_ex[i] * (EC_lim_ex / n_samples)
}
VoPI_df <- data.frame(prior_samples, prob_lim_ex = double(length = length(prior_samples)), EC = double(length = length(prior_samples))) %>%
dplyr::arrange(prior_samples)
head(VoPI_df)
nrow(VoPI_df)
length(prior_samples)
prior_samples <- rlang::eval_tidy(str2lang(paste0('r', prior_dist, '(', n_samples, ',', prior_args_proc, ')')))
lim_samples <- rlang::eval_tidy(str2lang(paste0('r', lim_dist, '(', n_samples, ',', lim_args_proc, ')')))
length(prior_samples)
process_args <- function(args){
processed_args <- paste(as.numeric(args[1]))
if(length(args) >= 2){
for (i in seq(from = 2, to = length(args))){
processed_args <- paste(processed_args, ',', as.numeric(args[i]))
}
} else {}
return(processed_args)
}
prior_args_proc <- process_args(args = prior_args); lim_args_proc <- process_args(args = lim_args)
prior_samples <- rlang::eval_tidy(str2lang(paste0('r', prior_dist, '(', n_samples, ',', prior_args_proc, ')')))
lim_samples <- rlang::eval_tidy(str2lang(paste0('r', lim_dist, '(', n_samples, ',', lim_args_proc, ')')))
EC_prior <- sum(prior_samples > lim_samples) * (EC_lim_ex / n_samples)
VoPI_df <- data.frame(prior_samples, prob_lim_ex = double(length = length(prior_samples)), EC = double(length = length(prior_samples))) %>%
dplyr::arrange(prior_samples)
for(i in seq(from = 1, to = n_samples, by = 1)){
VoPI_df$prob_lim_ex[i] <- rlang::eval_tidy(str2lang(paste0('p', lim_dist, '(', VoPI_df$prior_samples[i], ',', lim_args_proc, ')')))
VoPI_df$EC[i] <- VoPI_df$prob_lim_ex[i] * (EC_lim_ex / n_samples)
}
EC_prepost <- mean(VoPI_df$EC)
EC_prior
EC_prepost
VoPI <- function(prior_dist, prior_args, n_samples = 1e3, lim_dist, lim_args, EC_lim_ex){
require(tidyverse)
if(!grepl(pattern = 'beta|binom|cauchy|exp|gamma|lnorm|norm|unif|weibull',
x = prior_dist) == TRUE) stop('Please select a valid prior distribution')
if(!grepl(pattern = 'beta|binom|cauchy|exp|gamma|lnorm|norm|unif|weibull',
x = lim_dist) == TRUE) stop('Please select a valid limit distribution')
process_args <- function(args){
processed_args <- paste(as.numeric(args[1]))
if(length(args) >= 2){
for (i in seq(from = 2, to = length(args))){
processed_args <- paste(processed_args, ',', as.numeric(args[i]))
}
} else {}
return(processed_args)
}
prior_args_proc <- process_args(args = prior_args); lim_args_proc <- process_args(args = lim_args)
prior_samples <- rlang::eval_tidy(str2lang(paste0('r', prior_dist, '(', n_samples, ',', prior_args_proc, ')')))
lim_samples <- rlang::eval_tidy(str2lang(paste0('r', lim_dist, '(', n_samples, ',', lim_args_proc, ')')))
EC_prior <- sum(prior_samples > lim_samples) * (EC_lim_ex / n_samples)
VoPI_df <- data.frame(prior_samples, prob_lim_ex = double(length = length(prior_samples)), EC = double(length = length(prior_samples))) %>%
dplyr::arrange(prior_samples)
for(i in seq(from = 1, to = n_samples, by = 1)){
VoPI_df$prob_lim_ex[i] <- rlang::eval_tidy(str2lang(paste0('p', lim_dist, '(', VoPI_df$prior_samples[i], ',', lim_args_proc, ')')))
VoPI_df$EC[i] <- VoPI_df$prob_lim_ex[i] * (EC_lim_ex / n_samples)
}
EC_prepost <- mean(VoPI_df$EC)
VoPI <- min(0, (EC_prepost - EC_prior))
return(VoPI)
}
VoPI(prior_dist = 'exp', prior_args = list(rate = 3), n_samples = 1e3, lim_dist = 'norm', lim_args = list(mean = 3, sd = 1))
VoPI(prior_dist = 'exp', prior_args = list(rate = 3), n_samples = 1e3, lim_dist = 'norm', lim_args = list(mean = 3, sd = 1), EC_lim_ex = 1e5)
VoPI <- function(prior_dist, prior_args, n_samples = 1e3, lim_dist, lim_args, EC_lim_ex){
require(tidyverse)
if(!grepl(pattern = 'beta|binom|cauchy|exp|gamma|lnorm|norm|unif|weibull',
x = prior_dist) == TRUE) stop('Please select a valid prior distribution')
if(!grepl(pattern = 'beta|binom|cauchy|exp|gamma|lnorm|norm|unif|weibull',
x = lim_dist) == TRUE) stop('Please select a valid limit distribution')
process_args <- function(args){
processed_args <- paste(as.numeric(args[1]))
if(length(args) >= 2){
for (i in seq(from = 2, to = length(args))){
processed_args <- paste(processed_args, ',', as.numeric(args[i]))
}
} else {}
return(processed_args)
}
prior_args_proc <- process_args(args = prior_args); lim_args_proc <- process_args(args = lim_args)
prior_samples <- rlang::eval_tidy(str2lang(paste0('r', prior_dist, '(', n_samples, ',', prior_args_proc, ')')))
lim_samples <- rlang::eval_tidy(str2lang(paste0('r', lim_dist, '(', n_samples, ',', lim_args_proc, ')')))
EC_prior <- sum(prior_samples > lim_samples) * (EC_lim_ex / n_samples)
VoPI_df <- data.frame(prior_samples, prob_lim_ex = double(length = length(prior_samples)), EC = double(length = length(prior_samples))) %>%
dplyr::arrange(prior_samples)
for(i in seq(from = 1, to = n_samples, by = 1)){
VoPI_df$prob_lim_ex[i] <- rlang::eval_tidy(str2lang(paste0('p', lim_dist, '(', VoPI_df$prior_samples[i], ',', lim_args_proc, ')')))
VoPI_df$EC[i] <- VoPI_df$prob_lim_ex[i] * (EC_lim_ex / n_samples)
}
EC_prepost <- mean(VoPI_df$EC)
VoPI <- max(0, (EC_prior - EC_prepost))
return(VoPI)
}
VoPI(prior_dist = 'exp', prior_args = list(rate = 3), n_samples = 1e3, lim_dist = 'norm', lim_args = list(mean = 3, sd = 1), EC_lim_ex = 1e5)
VoPI(prior_dist = 'exp', prior_args = list(rate = 3), n_samples = 1e3, lim_dist = 'norm', lim_args = list(mean = 3, sd = 1), EC_lim_ex = 1e5)
VoPI(prior_dist = 'exp', prior_args = list(rate = 3), n_samples = 1e3, lim_dist = 'norm', lim_args = list(mean = 3, sd = 1), EC_lim_ex = 1e5)
VoPI(prior_dist = 'exp', prior_args = list(rate = 3), n_samples = 1e3, lim_dist = 'norm', lim_args = list(mean = 3, sd = 1), EC_lim_ex = 1e5)
VoPI(prior_dist = 'exp', prior_args = list(rate = 3), n_samples = 1e4, lim_dist = 'norm', lim_args = list(mean = 3, sd = 1), EC_lim_ex = 1e5)
VoPI(prior_dist = 'exp', prior_args = list(rate = 3), n_samples = 1e4, lim_dist = 'norm', lim_args = list(mean = 3, sd = 1), EC_lim_ex = 1e5)
VoPI(prior_dist = 'exp', prior_args = list(rate = 3), n_samples = 1e4, lim_dist = 'norm', lim_args = list(mean = 3, sd = 1), EC_lim_ex = 1e5)
VoPI(prior_dist = 'exp', prior_args = list(rate = 3), n_samples = 1e4, lim_dist = 'norm', lim_args = list(mean = 3, sd = 1), EC_lim_ex = 1e5)
VoPI(prior_dist = 'exp', prior_args = list(rate = 3), n_samples = 1e5, lim_dist = 'norm', lim_args = list(mean = 3, sd = 1), EC_lim_ex = 1e5)
source('~/GitHub/DomDF/R/VoPI.R', echo=TRUE)
VoPI(prior_dist = 'exp', prior_args = list(rate = 3), lim_dist = 'norm', lim_args = list(mean = 3, sd = 1), EC_lim_ex = 1e5)
getwd()
document()
rm(list = c("VoPI"))
devtools::install_github('DomDF/DomDF')
library(DomDF)
VoPI(prior_dist = 'exp', prior_args = list(rate = 3), lim_dist = 'norm', lim_args = list(mean = 3, sd = 1), EC_lim_ex = 1e5)
help(DomDF)
help(DomDF::Metropolis_RW)
help(DomDF::VoPI)
rm(list = ls())
library(DomDF)
DomDF::library.dynam.unload()
DomDF::library.dynam.unload(chname = chname)
DomDF::system.file()
